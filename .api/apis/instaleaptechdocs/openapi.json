{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0",
    "title": "InstaLeap Logistics API"
  },
  "paths": {
    "/jobs/availability/v2": {
      "post": {
        "summary": "Availability (Time Slots) V2",
        "tags": [
          "Job Creation"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency_code": {
                    "type": "string",
                    "description": "Currency code as defined in the [ISO - 4217](https://es.wikipedia.org/wiki/ISO_4217) standard."
                  },
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601). It must be at most five minutes before the current date."
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601). It must be at most seven days after the start date"
                  },
                  "slot_size": {
                    "type": "number",
                    "description": "Maximum size of the slots in minutes.  \n Must be a multiple of 15."
                  },
                  "minimum_slot_size": {
                    "type": "number",
                    "description": "Minimum size of the slots in minutes. \n Must be a multiple of 15."
                  },
                  "operational_models_priority": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "PICK_AND_DELIVERY_WITH_STORAGE_NO_TRANSFER",
                        "PICK_AND_DELIVERY",
                        "FULL_SERVICE",
                        "PICK_AND_COLLECT",
                        "PICK_AND_COLLECT_NO_TRANSFER",
                        "PICK_AND_DELIVERY_WITH_STORAGE",
                        "ZONE_PICKING_AND_DELIVERY_WITH_STORAGE",
                        "ZONE_PICKING_AND_COLLECT"
                      ]
                    },
                    "description": "Its default value will be the following list/array: ['PICK_AND_DELIVERY_WITH_STORAGE_NO_TRANSFER', 'PICK_AND_DELIVERY', 'FULL_SERVICE', 'PICK_AND_COLLECT', 'PICK_AND_COLLECT_NO_TRANSFER', 'PICK_AND_DELIVERY_WITH_STORAGE', 'ZONE_PICKING_AND_DELIVERY_WITH_STORAGE','ZONE_PICKING_AND_COLLECT'] \n \nThe items in the array represent which operational models will be taken into account. The order represents their priority. The first item in the list/array is the one with the higher priority"
                  },
                  "fallback": {
                    "type": "boolean",
                    "description": "Its default value is false. \n If this option is active and there is no capacity for the current request a set of PICK AND DELIVERY slots will be returned."
                  },
                  "store_reference": {
                    "type": "string",
                    "description": "It's the store id to identify it into your system."
                  },
                  "origin": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "address": {
                        "type": "string"
                      },
                      "address_two": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "zip_code": {
                        "type": "string"
                      },
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "name",
                      "address",
                      "latitude",
                      "longitude"
                    ]
                  },
                  "destination": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "address": {
                        "type": "string"
                      },
                      "address_two": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "zip_code": {
                        "type": "string"
                      },
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "name",
                      "address",
                      "latitude",
                      "longitude"
                    ]
                  },
                  "job_items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "photo_url": {
                          "type": "string"
                        },
                        "unit": {
                          "type": "string",
                          "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                        },
                        "sub_unit": {
                          "type": "string",
                          "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                        },
                        "quantity": {
                          "type": "number"
                        },
                        "sub_quantity": {
                          "type": "number"
                        },
                        "quantity_found_limits": {
                          "description": "You can define the maximum and minimum quantity of the product that can be picked. This will allow restricting the quantities of the product that can be carried according to promotions or business decisions. `These parameters will take precedence over the global parameters.`",
                          "properties": {
                            "max": {
                              "type": "number",
                              "description": "Quantity of product in the unit defined above, which restricts the collector the maximum that he can select from a product."
                            },
                            "min": {
                              "type": "number",
                              "description": "Quantity of product in the unit defined above, which restricts the collector the minimum that he can select from a product."
                            }
                          }
                        },
                        "barcodes": {
                          "type": "array",
                          "description": "EAN Codes per each item. (Used for Scanner Integration) Separated by commas. Example: ['2000125','20021215','54545454'] minimum 1 item. Barcodes can't be null",
                          "items": {}
                        },
                        "weight": {
                          "type": "number",
                          "description": "Should be specified in kilograms (kg)"
                        },
                        "volume": {
                          "type": "number",
                          "description": "Should be specified in liters (L)"
                        },
                        "price": {
                          "type": "number"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "category": {
                              "type": "string"
                            },
                            "plu": {
                              "type": "string"
                            },
                            "ean": {
                              "type": "string",
                              "description": "This value will be rendered on Control Tower."
                            },
                            "location": {
                              "type": "string",
                              "description": "The picker will see a tag indicating the product's location in the store."
                            },
                            "picking_index": {
                              "type": "string",
                              "pattern": "^[0-9]+$",
                              "description": "A number that will be used to order the products in the shopper app. In the case that is also sent the category or Location and these are configured in the database, the Shopper App will take the values of the Category or Location for its ordering."
                            }
                          }
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "unit",
                        "quantity",
                        "sub_unit",
                        "sub_quantity",
                        "price",
                        "attributes"
                      ]
                    }
                  }
                },
                "required": [
                  "currency_code",
                  "start",
                  "end",
                  "slot_size",
                  "operational_models_priority",
                  "origin",
                  "destination",
                  "job_items",
                  "store_reference"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "JWT token"
                      },
                      "from": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "to": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "store": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      },
                      "description": {
                        "type": "string",
                        "description": "The value could be `NOT_APPLICABLE` or `FALLBACK` (if the field 'fallback' = true)."
                      },
                      "operational_model": {
                        "type": "string",
                        "enum": [
                          "PICK_AND_DELIVERY",
                          "PICK_AND_DELIVERY_WITH_STORAGE",
                          "PICK_AND_COLLECT",
                          "FULL_SERVICE"
                        ]
                      },
                      "expires_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Malformed payload"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Missing attributes or malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Missing attributes"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/availability/{slotId}/check": {
      "get": {
        "summary": "Check slot",
        "tags": [
          "Slot Queries"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slotId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "slot_valid": {
                      "type": "boolean",
                      "default": true
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Slot not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "slot_valid": {
                      "type": "boolean",
                      "default": false
                    },
                    "message": {
                      "type": "string",
                      "default": "Slot not found"
                    }
                  }
                }
              }
            }
          },
          "410": {
            "description": "Slot expired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "slot_valid": {
                      "type": "boolean",
                      "default": false
                    },
                    "message": {
                      "type": "string",
                      "default": "Slot expired"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs": {
      "post": {
        "summary": "Create a Job",
        "tags": [
          "Job Creation"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "slot_id": {
                    "type": "string"
                  },
                  "client_reference": {
                    "type": "string",
                    "description": "OrderId or equivalent reference created in your backend for the job to be created."
                  },
                  "recipient": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "phone_number": {
                        "type": "string"
                      },
                      "identification": {
                        "type": "object",
                        "description": "(OPTIONAL) Customer/Recipient identification. This data is encrypted once it enters Instaleap systems.",
                        "properties": {
                          "number": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of identification (Ex. NIF, VAT number, Cedula, Passport, etc"
                          }
                        }
                      }
                    },
                    "required": [
                      "name",
                      "email",
                      "phone_number"
                    ]
                  },
                  "payment_info": {
                    "type": "object",
                    "properties": {
                      "currency_code": {
                        "type": "string",
                        "description": "Currency code as defined in the [ISO - 4217](https://es.wikipedia.org/wiki/ISO_4217) standard."
                      },
                      "prices": {
                        "type": "object",
                        "properties": {
                          "subtotal": {
                            "type": "number",
                            "description": "Subtotal of the goods. Without taxes, discounts or shipping_fee."
                          },
                          "shipping_fee": {
                            "type": "number",
                            "description": "Fee charged to the customer for the shipping of goods."
                          },
                          "discounts": {
                            "type": "number",
                            "description": "Discounts applied to the customer."
                          },
                          "taxes": {
                            "type": "number",
                            "description": "Taxes charged to the customer."
                          },
                          "order_value": {
                            "type": "number",
                            "description": "The value to be paid for the order, it includes the price of the goods, taxes, discounts and shipping_fee."
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "ORDER_VALUE",
                                    "SHIPPING_FEE",
                                    "TAXES",
                                    "DISCOUNTS",
                                    "SUBTOTAL"
                                  ]
                                },
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "number"
                                }
                              },
                              "description": "Add here details of each item that is within the prices. Specify here if there is more than one value in any item. I.e, If the invoice charges a total of 100 in taxes divided in two subtypes, there will be two items, describing each fee, each one with a name and value",
                              "required": [
                                "type",
                                "name",
                                "value"
                              ]
                            }
                          },
                          "additional_info": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "number"
                                }
                              },
                              "description": "Additional informacion about prices in the current job."
                            }
                          }
                        },
                        "required": [
                          "order_value"
                        ]
                      },
                      "payment": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Internal Client ID of the payment type.",
                            "nullable": true,
                            "type": "string"
                          },
                          "payment_status": {
                            "type": "string",
                            "enum": [
                              "FAILED",
                              "SUCCEEDED",
                              "CHANGED",
                              "IN_PROGRESS",
                              "REVERTED"
                            ],
                            "description": "Status of the payment. It could be one of these 5 values: 1. 'FAILED': When the total payment of the order fails. If it is reported that the payment was failed, our system will automatically raise a flag in the order so that it can be resolved by an agent from the control tower. 2. 'SUCCEEDED': When the full payment of the order is successful. If you have a payment confirmation lock activated, when you receive this status, the Shopper App is unlocked. 3. 'CHANGED': Payment information has changed. 4. 'IN_PROGRESS': The payment is in progress. 5. 'REVERTED': The payment was completely reverted"
                          },
                          "method": {
                            "type": "string",
                            "enum": [
                              "CASH",
                              "PREPAID",
                              "PAYMENT_TERMINAL",
                              "LOYALTY_CARD",
                              "PAYMENT_LINK",
                              "TRANSFER"
                            ],
                            "description": "Defines the payment method intended to be used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK and TRANSFER (used in the picker app to get special prices from your catalogue)."
                          },
                          "reference": {
                            "description": "Provide an identifier for the credit card. In case of credit/debit cards include the last 4 numbers registered for it (for example, VISA *3939).",
                            "nullable": true,
                            "type": "string"
                          },
                          "value": {
                            "type": "number",
                            "description": "Amount to be paid"
                          },
                          "payment_status_details": {
                            "type": "string",
                            "description": "Extra details of the payment status"
                          },
                          "method_details": {
                            "type": "string",
                            "description": "Extra details of the payment method"
                          },
                          "blocking_policy": {
                            "type": "string",
                            "description": "Desired Blocking Policy",
                            "enum": [
                              "CHECKOUT",
                              "EXIT_STORE",
                              "UNBLOCKED"
                            ]
                          },
                          "metadata": {
                            "type": "object",
                            "maxLength": 1000,
                            "description": "Json object to add details or relevant information about the payment being processed"
                          }
                        },
                        "required": [
                          "method"
                        ]
                      }
                    }
                  },
                  "add_delivery_code": {
                    "type": "boolean",
                    "default": true,
                    "description": "Used to force the driver to complete the order with a delivery code. Default value is `true`."
                  },
                  "job_comment": {
                    "type": "string",
                    "description": "General order comments can be captured in this field."
                  },
                  "contact_less": {
                    "type": "object",
                    "properties": {
                      "comment": {
                        "type": "string",
                        "enum": [
                          "LeaveAtTheDoor",
                          "LeaveInReception"
                        ],
                        "description": "Used to set a delivery option, either in reception or at the door."
                      },
                      "cash_receiver": {
                        "type": "string",
                        "description": "Intended for name of person who will receive delivery."
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "Phone number of the secondary recipient."
                      }
                    },
                    "required": [
                      "comment",
                      "cash_receiver",
                      "phone_number"
                    ]
                  },
                  "external_data": {
                    "type": "object",
                    "description": "You can inform the resource about any additional data to register the order. This information can be submitted in create order or updated later with the endpoint external_data (link). You can send the information to `shopperApp`, `control tower`, or `webhook`.",
                    "properties": {
                      "webhook": {
                        "type": "object"
                      },
                      "backoffice": {
                        "type": "object"
                      },
                      "shopper_app": {
                        "type": "object"
                      }
                    }
                  }
                },
                "required": [
                  "slot_id",
                  "client_reference",
                  "recipient"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "job_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Missing attributes or malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Missing attributes"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "summary": "Get job by id",
        "tags": [
          "Job Queries"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_number": {
                      "type": "string",
                      "description": "It is your internal reference of the Order/Job in your systems."
                    },
                    "client_id": {
                      "type": "string",
                      "description": "It is a unique ID for you as a Client in our Systems. It's how technically we identify you and your orders"
                    },
                    "start_time": {
                      "type": "string",
                      "format": "date-time",
                      "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601). Start time of the Slot for this Job"
                    },
                    "end_time": {
                      "type": "string",
                      "format": "date-time",
                      "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601). End time of the Slot for this Job"
                    },
                    "state": {
                      "type": "string",
                      "description": "Describes the state of the Job."
                    },
                    "origin": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "address": {
                          "type": "string"
                        },
                        "address_two": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "state": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "zip_code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "coordinates": {
                          "type": "object",
                          "properties": {
                            "lat": {
                              "type": "number"
                            },
                            "lng": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    },
                    "destination": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "address": {
                          "type": "string"
                        },
                        "address_two": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "state": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "zip_code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "coordinates": {
                          "type": "object",
                          "properties": {
                            "lat": {
                              "type": "number"
                            },
                            "lng": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    },
                    "total_items": {
                      "type": "number",
                      "description": "Total items in the current Job."
                    },
                    "items_replaced": {
                      "type": "number",
                      "description": "Total items replaced in the current Job."
                    },
                    "products_cost": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "currency_code": {
                          "type": "string"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "state": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "package_id": {
                            "type": "string"
                          },
                          "quantity": {
                            "type": "number"
                          },
                          "found_quantity": {
                            "type": "number"
                          },
                          "photo_url": {
                            "type": "string"
                          },
                          "presentation": {
                            "type": "object",
                            "properties": {
                              "quantity": {
                                "type": "number"
                              },
                              "unit": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "price": {
                                "type": "object",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "currency_code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "weight": {
                                "type": "number"
                              },
                              "dimensions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "length": {
                                      "type": "number"
                                    },
                                    "width": {
                                      "type": "number"
                                    },
                                    "height": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "attributes": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string"
                              },
                              "another attributes": {
                                "type": "string"
                              }
                            }
                          },
                          "origin": {
                            "description": "Who adds the item (client, picker...)",
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "is_substitute": {
                            "type": "boolean"
                          },
                          "replaced_by": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "collect_with": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "The payment method used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD (used in the picker app to get special prices from your catalogue)."
                        },
                        "payment": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number"
                            },
                            "currency": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "recipient": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "phone_number": {
                          "type": "number"
                        }
                      }
                    },
                    "tasks": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "state": {
                          "type": "string"
                        },
                        "resource": {
                          "type": "string"
                        },
                        "payment": {
                          "type": "string"
                        },
                        "steps": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "state": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "can_process_checkout": {
                      "type": "boolean"
                    },
                    "delivery_options": {
                      "type": "array",
                      "items": {}
                    },
                    "job_comment": {
                      "type": "string"
                    },
                    "external_data": {
                      "description": "You can inform the resource about any additional data to register the order. This information can be submitted in create order or updated later with the endpoint external_data (link). You can sent the information to `shopperApp`, `control tower` or `webhook`.",
                      "type": "object",
                      "properties": {
                        "webhook": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            }
                          }
                        },
                        "backoffice": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Job not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/{jobId}/items": {
      "post": {
        "summary": "Add new item",
        "tags": [
          "Job Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "The existing Job ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "item_to_add": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "photo_url": {
                        "type": "string"
                      },
                      "unit": {
                        "type": "string",
                        "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                      },
                      "sub_unit": {
                        "type": "string",
                        "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                      },
                      "quantity": {
                        "type": "number"
                      },
                      "sub_quantity": {
                        "type": "number"
                      },
                      "quantity_found_limits": {
                        "description": "You can define the maximum and minimum quantity of the product that can be picked. This will allow restricting the quantities of the product that can be carried according to promotions or business decisions. `These parameters will take precedence over the global parameters.`",
                        "properties": {
                          "max": {
                            "type": "number",
                            "description": "Quantity of product in the unit defined above, which restricts the collector the maximum that he can select from a product."
                          },
                          "min": {
                            "type": "number",
                            "description": "Quantity of product in the unit defined above, which restricts the collector the minimum that he can select from a product."
                          }
                        }
                      },
                      "barcodes": {
                        "type": "array",
                        "description": "EAN Codes per each item. (Used for Scanner Integration) Separated by commas. Example: ['2000125','20021215','54545454'] minimum 1 item. Barcodes can't be null",
                        "items": {}
                      },
                      "weight": {
                        "type": "number",
                        "description": "Should be specified in kilograms (kg)"
                      },
                      "volume": {
                        "type": "number",
                        "description": "Should be specified in liters (L)"
                      },
                      "price": {
                        "type": "number"
                      },
                      "comment": {
                        "type": "string"
                      },
                      "attributes": {
                        "properties": {
                          "category": {
                            "type": "string"
                          },
                          "plu": {
                            "type": "string"
                          },
                          "ean": {
                            "type": "string",
                            "description": "This value will be rendered on Control Tower."
                          },
                          "location": {
                            "type": "string",
                            "description": "The picker will see a tag indicating the product's location in the store."
                          },
                          "picking_index": {
                            "type": "string",
                            "pattern": "^[0-9]+$",
                            "description": "A number that will be used to order the products in the shopper app. In the case that is also sent the category or Location and these are configured in the database, the Shopper App will take the values of the Category or Location for its ordering."
                          }
                        }
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "unit",
                      "quantity",
                      "sub_unit",
                      "sub_quantity",
                      "price",
                      "attributes"
                    ]
                  }
                },
                "required": [
                  "item_to_add"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "description": "JWT token"
                    },
                    "itemId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Missing attributes or malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Missing attributes"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/{jobId}/items/{itemRef}": {
      "put": {
        "summary": "Update existing item",
        "tags": [
          "Job Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "The existing Job ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "itemRef",
            "description": "Your internal Reference of the item",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "values": {
                    "type": "object",
                    "description": "The object with the attributes of the item that you want to update",
                    "properties": {
                      "state": {
                        "type": "string",
                        "description": "State of the item. Send CANCELLED to cancel an existing item inside a Job"
                      },
                      "quantity": {
                        "type": "number",
                        "description": "Quantity of the item"
                      },
                      "comment": {
                        "type": "string",
                        "description": "Comment of the item"
                      }
                    }
                  }
                },
                "required": [
                  "values"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string"
                    },
                    "itemId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "properties": {
                        "location": {
                          "type": "string",
                          "description": "Error's location"
                        },
                        "param": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "msg": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/{jobId}/payment_info": {
      "put": {
        "summary": "Payment info",
        "description": "Enables your systems to change job payment information.",
        "tags": [
          "Job Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prices": {
                    "type": "object",
                    "properties": {
                      "subtotal": {
                        "type": "number",
                        "description": "Subtotal of the goods. Without taxes, discounts or shipping_fee."
                      },
                      "shipping_fee": {
                        "type": "number",
                        "description": "Fee charged to the customer for the shipping of goods."
                      },
                      "discounts": {
                        "type": "number",
                        "description": "Discounts applied to the customer."
                      },
                      "taxes": {
                        "type": "number",
                        "description": "Taxes charged to the customer."
                      },
                      "order_value": {
                        "type": "number",
                        "description": "The value to be paid for the order, it includes the price of the goods, taxes, discounts and shipping_fee."
                      },
                      "attributes": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "ORDER_VALUE",
                                "SHIPPING_FEE",
                                "TAXES",
                                "DISCOUNTS",
                                "SUBTOTAL"
                              ]
                            },
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "number"
                            }
                          },
                          "description": "Add here details of each item that is within the prices. Specify here if there is more than one value in any item. I.e, If the invoice charges a total of 100 in taxes divided in two subtypes, there will be two items, describing each fee, each one with a name and value",
                          "required": [
                            "type",
                            "name",
                            "value"
                          ]
                        }
                      },
                      "additional_info": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "number"
                            }
                          },
                          "description": "Additional informacion about prices in the current job."
                        }
                      }
                    },
                    "required": [
                      "subtotal",
                      "shipping_fee",
                      "discounts",
                      "taxes",
                      "order_value",
                      "attributes"
                    ]
                  },
                  "payment": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Internal Client ID of the payment type.",
                        "nullable": true,
                        "type": "string"
                      },
                      "payment_status": {
                        "type": "string",
                        "enum": [
                          "FAILED",
                          "SUCCEEDED",
                          "CHANGED",
                          "IN_PROGRESS",
                          "REVERTED"
                        ],
                        "description": "Status of the payment. It could be one of these 5 values: 1. 'FAILED': When the total payment of the order fails. If it is reported that the payment was failed, our system will automatically raise a flag in the order so that it can be resolved by an agent from the control tower. 2. 'SUCCEEDED': When the full payment of the order is successful. If you have a payment confirmation lock activated, when you receive this status, the Shopper App is unlocked. 3. 'CHANGED': Payment information has changed. 4. 'IN_PROGRESS': The payment is in progress. 5. 'REVERTED': The payment was completely reverted"
                      },
                      "method": {
                        "type": "string",
                        "enum": [
                          "CASH",
                          "PREPAID",
                          "PAYMENT_TERMINAL",
                          "LOYALTY_CARD",
                          "PAYMENT_LINK",
                          "TRANSFER"
                        ],
                        "description": "Defines the payment method intended to be used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK and TRANSFER (used in the picker app to get special prices from your catalogue)."
                      },
                      "reference": {
                        "description": "Provide an identifier for the credit card. In case of credit/debit cards include the last 4 numbers registered for it (for example, VISA *3939).",
                        "nullable": true,
                        "type": "string"
                      },
                      "value": {
                        "type": "number",
                        "description": "Amount to be paid"
                      },
                      "payment_status_details": {
                        "type": "string",
                        "description": "Extra details of the payment status"
                      },
                      "method_details": {
                        "type": "string",
                        "description": "Extra details of the payment method"
                      },
                      "blocking_policy": {
                        "type": "string",
                        "description": "Desired Blocking Policy",
                        "enum": [
                          "CHECKOUT",
                          "EXIT_STORE",
                          "UNBLOCKED"
                        ]
                      },
                      "metadata": {
                        "type": "object",
                        "maxLength": 1000,
                        "description": "Json object to add details or relevant information about the payment being processed"
                      }
                    },
                    "required": [
                      "id",
                      "payment_status",
                      "method",
                      "reference",
                      "value"
                    ]
                  },
                  "invoice": {
                    "type": "object",
                    "properties": {
                      "reference": {
                        "type": "string",
                        "description": "Invoice number or reference."
                      },
                      "attachments": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "(Optional) Array of URL's related to the PDF/Images to find the invoice on your systems."
                      }
                    },
                    "required": [
                      "reference",
                      "attachments"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Operation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currencyCode": {
                      "type": "string"
                    },
                    "prices": {
                      "type": "object",
                      "properties": {
                        "subtotal": {
                          "type": "number",
                          "description": "Subtotal of the goods. Without taxes, discounts or shipping_fee."
                        },
                        "shippingFee": {
                          "type": "number",
                          "description": "Fee charged to the customer for the shipping of goods."
                        },
                        "discounts": {
                          "type": "number",
                          "description": "Discounts applied to the customer."
                        },
                        "taxes": {
                          "type": "number",
                          "description": "Taxes charged to the customer."
                        },
                        "order_value": {
                          "type": "number",
                          "description": "The value to be paid for the order, it includes the price of the goods, taxes, discounts and shipping_fee."
                        },
                        "attributes": {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "ORDER_VALUE",
                                      "SHIPPING_FEE",
                                      "TAXES",
                                      "DISCOUNTS",
                                      "SUBTOTAL"
                                    ]
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "number"
                                  }
                                },
                                "description": "Add here details of each item that is within the prices. Specify here if there is more than one value in any item. I.e, If the invoice charges a total of 100 in taxes divided in two subtypes, there will be two items, describing each fee, each one with a name and value",
                                "required": [
                                  "type",
                                  "name",
                                  "value"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "type",
                                  "name",
                                  "value"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "type",
                                  "name",
                                  "value"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "type",
                                  "name",
                                  "value"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "type",
                                  "name",
                                  "value"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    },
                    "payment": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Internal Client ID of the payment type.",
                          "nullable": true,
                          "type": "string"
                        },
                        "payment_status": {
                          "type": "string",
                          "enum": [
                            "FAILED",
                            "SUCCEEDED",
                            "CHANGED",
                            "IN_PROGRESS",
                            "REVERTED"
                          ],
                          "description": "Status of the payment. It could be one of these 5 values: 1. 'FAILED': When the total payment of the order fails. If it is reported that the payment was failed, our system will automatically raise a flag in the order so that it can be resolved by an agent from the control tower. 2. 'SUCCEEDED': When the full payment of the order is successful. If you have a payment confirmation lock activated, when you receive this status, the Shopper App is unlocked. 3. 'CHANGED': Payment information has changed. 4. 'IN_PROGRESS': The payment is in progress. 5. 'REVERTED': The payment was completely reverted"
                        },
                        "method": {
                          "type": "string",
                          "enum": [
                            "CASH",
                            "PREPAID",
                            "PAYMENT_TERMINAL",
                            "LOYALTY_CARD",
                            "PAYMENT_LINK",
                            "TRANSFER"
                          ],
                          "description": "Defines the payment method intended to be used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK and TRANSFER (used in the picker app to get special prices from your catalogue)."
                        },
                        "reference": {
                          "description": "Provide an identifier for the credit card. In case of credit/debit cards include the last 4 numbers registered for it (for example, VISA *3939).",
                          "nullable": true,
                          "type": "string"
                        },
                        "value": {
                          "type": "number",
                          "description": "Amount to be paid"
                        },
                        "payment_status_details": {
                          "type": "string",
                          "description": "Extra details of the payment status"
                        },
                        "method_details": {
                          "type": "string",
                          "description": "Extra details of the payment method"
                        },
                        "blocking_policy": {
                          "type": "string",
                          "description": "Desired Blocking Policy",
                          "enum": [
                            "CHECKOUT",
                            "EXIT_STORE",
                            "UNBLOCKED"
                          ]
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Json object to add details or relevant information about the payment being processed"
                        }
                      }
                    },
                    "invoice": {
                      "properties": {
                        "reference": {
                          "type": "string",
                          "description": "Invoice number or reference."
                        },
                        "attachments": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Array of URL's related to the PDF/Images to find the invoice on your systems."
                        }
                      },
                      "nullable": true,
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation Error: The request has some errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "default": false
                    },
                    "message": {
                      "type": "string",
                      "default": "Please check the payload sent to avoid this error"
                    },
                    "error": {
                      "type": "string",
                      "default": "Invalid request, there are some errors with the payload sent"
                    },
                    "validationErrors": {
                      "type": "object",
                      "properties": {
                        "keyword": {
                          "type": "string",
                          "default": "required"
                        },
                        "dataPath": {
                          "type": "string",
                          "description": "The path of the invalid property",
                          "example": ".payment"
                        },
                        "schemaPath": {
                          "type": "string"
                        },
                        "params": {
                          "type": "object",
                          "properties": {
                            "missingProperty": {
                              "type": "string",
                              "description": "The property name",
                              "example": "id"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/{jobId}/report_fraud": {
      "put": {
        "summary": "Report potential fraud",
        "tags": [
          "Job Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "Describes why the flag was created."
                  }
                },
                "required": [
                  "reason"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "flag_id": {
                      "type": "number",
                      "description": "Unique identifier of the flag."
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601)."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Missing attributes or malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Missing attributes"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/{jobId}/custom_flag": {
      "put": {
        "summary": "Report a custom flag",
        "tags": [
          "Job Actions"
        ],
        "description": "Report a custom flag on the control tower.",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "Describes why the flag was created."
                  }
                },
                "required": [
                  "reason"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "flag_id": {
                      "type": "number",
                      "description": "Unique identifier of the flag."
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601)."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Missing attributes or malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Missing attributes"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/{jobId}/job_comment": {
      "put": {
        "summary": "Update job comment",
        "tags": [
          "Job Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "The existing Job ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "job_comment": {
                    "type": "string",
                    "description": "The new comment for the existing Job."
                  }
                },
                "required": [
                  "job_comment"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "properties": {
                        "location": {
                          "type": "string",
                          "description": "Error's location"
                        },
                        "param": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "msg": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/{jobId}/external_data": {
      "put": {
        "summary": "Replace external data",
        "tags": [
          "Job Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "The existing Job ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "external_data": {
                    "type": "object",
                    "description": "The new external data for the existing Job.",
                    "properties": {
                      "webhook": {
                        "type": "object"
                      },
                      "backoffice": {
                        "type": "object"
                      },
                      "shopper_app": {
                        "type": "object"
                      }
                    }
                  }
                },
                "required": [
                  "external_data"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "EXTERNAL_DATA_UPDATED_SUCCESSFULLY"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized client or client configuration not configured yet",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Access forbidden. Please provide a valid API token",
                      "example": "Access forbidden. Please provide a valid API token"
                    },
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/packages/create/{jobId}": {
      "post": {
        "summary": "Create new packages",
        "description": "Create new packages to current job",
        "tags": [
          "Job Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "resource_id": {
                    "type": "string"
                  },
                  "packages": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "department": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "packages"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "package_ids": {
                      "type": "array",
                      "items": {}
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Error creating packages"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/{jobId}/cancel": {
      "delete": {
        "summary": "Cancel a job",
        "tags": [
          "Job Actions"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/{slotId}/extend-expiration-time": {
      "put": {
        "summary": "Extend slot expiration time",
        "tags": [
          "Slot Queries"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slotId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "slotId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "expires_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "EXPIRATION_UPDATED_SUCCESSFULLY"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Missing attributes or malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Missing attributes"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/jobs/items": {
      "post": {
        "summary": "Adds a set of items to a job.",
        "tags": [
          "Job Actions"
        ],
        "security": [
          {
            "x-api-key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "job_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The job's id."
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "photo_url": {
                          "type": "string"
                        },
                        "unit": {
                          "type": "string",
                          "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                        },
                        "sub_unit": {
                          "type": "string",
                          "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                        },
                        "quantity": {
                          "type": "number"
                        },
                        "sub_quantity": {
                          "type": "number"
                        },
                        "quantity_found_limits": {
                          "description": "You can define the maximum and minimum quantity of the product that can be picked. This will allow restricting the quantities of the product that can be carried according to promotions or business decisions. `These parameters will take precedence over the global parameters.`",
                          "properties": {
                            "max": {
                              "type": "number",
                              "description": "Quantity of product in the unit defined above, which restricts the collector the maximum that he can select from a product."
                            },
                            "min": {
                              "type": "number",
                              "description": "Quantity of product in the unit defined above, which restricts the collector the minimum that he can select from a product."
                            }
                          }
                        },
                        "barcodes": {
                          "type": "array",
                          "description": "EAN Codes per each item. (Used for Scanner Integration) Separated by commas. Example: ['2000125','20021215','54545454'] minimum 1 item. Barcodes can't be null",
                          "items": {}
                        },
                        "weight": {
                          "type": "number",
                          "description": "Should be specified in kilograms (kg)"
                        },
                        "volume": {
                          "type": "number",
                          "description": "Should be specified in liters (L)"
                        },
                        "price": {
                          "type": "number"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "attributes": {
                          "properties": {
                            "category": {
                              "type": "string"
                            },
                            "plu": {
                              "type": "string"
                            },
                            "ean": {
                              "type": "string",
                              "description": "This value will be rendered on Control Tower."
                            },
                            "location": {
                              "type": "string",
                              "description": "The picker will see a tag indicating the product's location in the store."
                            },
                            "picking_index": {
                              "type": "string",
                              "pattern": "^[0-9]+$",
                              "description": "A number that will be used to order the products in the shopper app. In the case that is also sent the category or Location and these are configured in the database, the Shopper App will take the values of the Category or Location for its ordering."
                            }
                          }
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "unit",
                        "quantity",
                        "sub_unit",
                        "sub_quantity",
                        "price",
                        "attributes"
                      ]
                    }
                  }
                },
                "required": [
                  "job_id",
                  "items"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "items_ids": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Malformed payload"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Missing attributes or malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Missing attributes"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Removes a set of items from a job by canceling the ones that match the references sent.",
        "tags": [
          "Job Actions"
        ],
        "security": [
          {
            "x-api-key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "job_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The job's id."
                  },
                  "items_references": {
                    "type": "array",
                    "description": "The item's references. If more than one item inside the job matches the reference, all items will be marked as canceled.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "job_id",
                  "items_references"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job_id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "items_ids": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Malformed payload"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Client configuration not configured yet. Please contact support center",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Access forbidden. Client has not been configured yet",
                      "example": "Access forbidden. Client has not been configured yet"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Missing attributes or malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Missing attributes"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.xandar.instaleap.io"
    }
  ],
  "components": {
    "requestBodies": {
      "FlagCreation": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "Describes why the flag was created."
                }
              },
              "required": [
                "reason"
              ]
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "x-api-key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "schemas": {
      "Empty": {
        "type": "object"
      },
      "BifrostSuccessfulResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "job_id": {
            "type": "string"
          }
        }
      },
      "Jobs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the job as created in the Delivery Engine."
            },
            "status": {
              "type": "string",
              "description": "Describes the state of the Job."
            },
            "client_reference": {
              "type": "string",
              "description": "It is your internal reference of the Order/Job in your systems."
            },
            "declared_value": {
              "type": "number",
              "description": "Declared value of goods purchased."
            },
            "payment_value": {
              "type": "number",
              "description": "The value to paid for the goods."
            },
            "payment_method": {
              "type": "string",
              "description": "Defines the payment method intended to be used by the user. Options are CASH, PREPAID, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK, TRANSFER (used in the picker app to get special prices from your catalogue)."
            },
            "slot": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "from": {
                  "type": "string",
                  "format": "date-time"
                },
                "to": {
                  "type": "string",
                  "format": "date-time"
                },
                "expires_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
                }
              }
            },
            "recipient": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "phone_number": {
                  "type": "string"
                },
                "identification": {
                  "type": "object",
                  "description": "(OPTIONAL) Customer/Recipient identification. This data is encrypted once it enters Instaleap systems.",
                  "properties": {
                    "number": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of identification (Ex. NIF, VAT number, Cedula, Passport, etc"
                    }
                  }
                }
              },
              "required": [
                "name",
                "email",
                "phone_number"
              ]
            },
            "origin": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                },
                "address_two": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "zip_code": {
                  "type": "string"
                },
                "latitude": {
                  "type": "number"
                },
                "longitude": {
                  "type": "number"
                }
              },
              "required": [
                "name",
                "address",
                "latitude",
                "longitude"
              ]
            },
            "destination": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                },
                "address_two": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "zip_code": {
                  "type": "string"
                },
                "latitude": {
                  "type": "number"
                },
                "longitude": {
                  "type": "number"
                }
              },
              "required": [
                "name",
                "address",
                "latitude",
                "longitude"
              ]
            },
            "job_items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "description": "Indicates the status of the item. Possible values are `PENDING`, `ADDED`, `REPLACED`, `REJECTED_BY_USER`, `REJECTED_BY_DRIVER` or `REMOVED`."
                  },
                  "added_by": {
                    "type": "string",
                    "description": "Explains who added the item into the job. Usual values are `CLIENT`, `PICKER`, `ISSUE`, `AGENT` or `CONTROL_TOWER`."
                  },
                  "photo_url": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "number"
                  },
                  "found_quantity": {
                    "type": "number"
                  },
                  "presentation": {
                    "type": "object",
                    "properties": {
                      "quantity": {
                        "type": "number"
                      },
                      "unit": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "price": {
                        "type": "number"
                      },
                      "weight": {
                        "type": "number"
                      },
                      "dimensions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "length": {
                              "type": "number"
                            },
                            "width": {
                              "type": "number"
                            },
                            "height": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "quantity",
                      "unit",
                      "price"
                    ]
                  },
                  "comment": {
                    "type": "string"
                  },
                  "attributes": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string"
                      },
                      "plu": {
                        "type": "string"
                      },
                      "ean": {
                        "type": "string",
                        "description": "This value will be rendered on Control Tower."
                      },
                      "location": {
                        "type": "string",
                        "description": "The picker will see a tag indicating the product's location in the store."
                      }
                    }
                  }
                },
                "required": [
                  "name",
                  "id",
                  "quantity",
                  "presentation"
                ]
              }
            },
            "volume": {
              "type": "number",
              "description": "Estimated volume in cubic centimeters."
            },
            "weight": {
              "type": "number",
              "description": "Estimated weight in grams."
            },
            "issue_of": {
              "type": "string",
              "description": "Indicates if the job is of type issue. Issues are used to deliver items when they are not accepted. WARNING: This attribute is going to be `null` for the majority of jobs."
            },
            "tasks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "resource_id": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "payment": {
                    "type": "string"
                  },
                  "steps": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "state": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "ItemSearchResult": {
        "type": "object",
        "properties": {
          "search_results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "photo_url": {
                  "type": "string"
                },
                "unit": {
                  "type": "string",
                  "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                },
                "sub_unit": {
                  "type": "string",
                  "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                },
                "quantity": {
                  "type": "number"
                },
                "sub_quantity": {
                  "type": "number"
                },
                "weight": {
                  "type": "number",
                  "description": "Should be specified in kilograms (kg)"
                },
                "volume": {
                  "type": "number",
                  "description": "Should be specified in liters (L)"
                },
                "price": {
                  "type": "number"
                },
                "comment": {
                  "type": "string"
                },
                "attributes": {
                  "properties": {
                    "category": {
                      "type": "string"
                    },
                    "plu": {
                      "type": "string"
                    },
                    "ean": {
                      "type": "string",
                      "description": "This value will be rendered on Control Tower."
                    },
                    "location": {
                      "type": "string",
                      "description": "The picker will see a tag indicating the product's location in the store."
                    }
                  }
                }
              }
            }
          },
          "results_count": {
            "type": "number",
            "description": "Number of items generated in the request."
          },
          "page": {
            "type": "number",
            "description": "Page number according to the whole result set"
          },
          "next": {
            "type": "number",
            "description": "Next page. Don't add it for last page."
          }
        },
        "required": [
          "search_results",
          "page"
        ]
      },
      "ItemSearchResultV2": {
        "type": "object",
        "properties": {
          "search_results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "photo_url": {
                  "type": "string"
                },
                "unit": {
                  "type": "string",
                  "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                },
                "sub_unit": {
                  "type": "string",
                  "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                },
                "quantity": {
                  "type": "number"
                },
                "sub_quantity": {
                  "type": "number"
                },
                "quantity_found_limits": {
                  "description": "You can define the maximum and minimum quantity of the product that can be picked. This will allow restricting the quantities of the product that can be carried according to promotions or business decisions. `These parameters will take precedence over the global parameters.`",
                  "properties": {
                    "max": {
                      "type": "number",
                      "description": "Quantity of product in the unit defined above, which restricts the collector the maximum that he can select from a product."
                    },
                    "min": {
                      "type": "number",
                      "description": "Quantity of product in the unit defined above, which restricts the collector the minimum that he can select from a product."
                    }
                  }
                },
                "barcodes": {
                  "type": "array",
                  "description": "EAN Codes per each item. (Used for Scanner Integration) Separated by commas. Example: ['2000125','20021215','54545454'] minimum 1 item. Barcodes can't be null",
                  "items": {}
                },
                "weight": {
                  "type": "number",
                  "description": "Should be specified in kilograms (kg)"
                },
                "volume": {
                  "type": "number",
                  "description": "Should be specified in liters (L)"
                },
                "price": {
                  "type": "number"
                },
                "comment": {
                  "type": "string"
                },
                "attributes": {
                  "properties": {
                    "category": {
                      "type": "string"
                    },
                    "plu": {
                      "type": "string"
                    },
                    "ean": {
                      "type": "string",
                      "description": "This value will be rendered on Control Tower."
                    },
                    "location": {
                      "type": "string",
                      "description": "The picker will see a tag indicating the product's location in the store."
                    },
                    "picking_index": {
                      "type": "string",
                      "pattern": "^[0-9]+$",
                      "description": "A number that will be used to order the products in the shopper app. In the case that is also sent the category or Location and these are configured in the database, the Shopper App will take the values of the Category or Location for its ordering."
                    }
                  }
                }
              },
              "required": [
                "id",
                "name",
                "unit",
                "quantity",
                "sub_unit",
                "sub_quantity",
                "price",
                "attributes"
              ]
            }
          },
          "results_count": {
            "type": "number",
            "description": "Number of items generated in the request."
          },
          "page": {
            "type": "number",
            "description": "Page number according to the whole result set"
          },
          "next": {
            "type": "number",
            "description": "Next page. Don't add it for last page."
          }
        },
        "required": [
          "search_results",
          "page"
        ]
      },
      "GetPaymentResult": {
        "type": "object",
        "properties": {
          "payment_methods": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Internal Client ID of the payment type."
                },
                "type": {
                  "type": "string",
                  "description": "Defines the payment method intended to be used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD (used in the picker app to get special prices from your catalogue)."
                },
                "reference": {
                  "type": "string",
                  "description": "Provide an identifier for the credit card. In case of credit/debit cards include the last 4 numbers registered for it (for example, VISA *3939)."
                }
              }
            }
          }
        }
      },
      "Slot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
          }
        }
      },
      "Availability": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "from": {
              "type": "string",
              "format": "date-time"
            },
            "to": {
              "type": "string",
              "format": "date-time"
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
            }
          }
        }
      },
      "SlotV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "JWT token"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "store": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "description": {
            "type": "string",
            "description": "The value could be `NOT_APPLICABLE` or `FALLBACK` (if the field 'fallback' = true)."
          },
          "operational_model": {
            "type": "string",
            "enum": [
              "PICK_AND_DELIVERY",
              "PICK_AND_DELIVERY_WITH_STORAGE",
              "PICK_AND_COLLECT",
              "FULL_SERVICE"
            ]
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
          }
        }
      },
      "ExtendExpirationTimeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "slotId": {
                "type": "string",
                "format": "uuid"
              },
              "expires_at": {
                "type": "string",
                "format": "date-time",
                "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
              }
            }
          },
          "message": {
            "type": "string",
            "example": "EXPIRATION_UPDATED_SUCCESSFULLY"
          }
        }
      },
      "AvailabilityV2": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "JWT token"
            },
            "from": {
              "type": "string",
              "format": "date-time"
            },
            "to": {
              "type": "string",
              "format": "date-time"
            },
            "store": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "description": {
              "type": "string",
              "description": "The value could be `NOT_APPLICABLE` or `FALLBACK` (if the field 'fallback' = true)."
            },
            "operational_model": {
              "type": "string",
              "enum": [
                "PICK_AND_DELIVERY",
                "PICK_AND_DELIVERY_WITH_STORAGE",
                "PICK_AND_COLLECT",
                "FULL_SERVICE"
              ]
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
            }
          }
        }
      },
      "stockV2": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "Your system should return an Array containing the different locations where an item is present, and the quantities available there. Each item of the array is a location.",
          "properties": {
            "place_name": {
              "type": "string",
              "description": "Section in which the item is located/stored (eg. warehouse # 1). It can be an empty value."
            },
            "unit": {
              "type": "string",
              "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit but it can't be an empty value."
            },
            "quantity": {
              "type": "number",
              "format": "double"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "description": " It could be null. Last time the item's stock was updated (UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601))."
            }
          },
          "required": [
            "place_name",
            "unit",
            "quantity",
            "updated_at"
          ]
        }
      },
      "Point": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "address_two": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "address",
          "latitude",
          "longitude"
        ]
      },
      "Presentation": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "weight": {
            "type": "number"
          },
          "dimensions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "length": {
                  "type": "number"
                },
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                }
              }
            }
          }
        },
        "required": [
          "quantity",
          "unit",
          "price"
        ]
      },
      "JobItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Indicates the status of the item. Possible values are `PENDING`, `ADDED`, `REPLACED`, `REJECTED_BY_USER`, `REJECTED_BY_DRIVER` or `REMOVED`."
          },
          "added_by": {
            "type": "string",
            "description": "Explains who added the item into the job. Usual values are `CLIENT`, `PICKER`, `ISSUE`, `AGENT` or `CONTROL_TOWER`."
          },
          "photo_url": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "found_quantity": {
            "type": "number"
          },
          "presentation": {
            "type": "object",
            "properties": {
              "quantity": {
                "type": "number"
              },
              "unit": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "price": {
                "type": "number"
              },
              "weight": {
                "type": "number"
              },
              "dimensions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "length": {
                      "type": "number"
                    },
                    "width": {
                      "type": "number"
                    },
                    "height": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "required": [
              "quantity",
              "unit",
              "price"
            ]
          },
          "comment": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string"
              },
              "plu": {
                "type": "string"
              },
              "ean": {
                "type": "string",
                "description": "This value will be rendered on Control Tower."
              },
              "location": {
                "type": "string",
                "description": "The picker will see a tag indicating the product's location in the store."
              }
            }
          }
        },
        "required": [
          "name",
          "id",
          "quantity",
          "presentation"
        ]
      },
      "JobItemWebhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Indicates the status of the item. Possible values are `PENDING`, `ADDED`, `REPLACED`, `REJECTED_BY_USER`, `REJECTED_BY_DRIVER` or `REMOVED`."
          },
          "replacements": {
            "type": "string"
          },
          "is_substitute": {
            "type": "string"
          },
          "added_by": {
            "type": "string",
            "description": "Explains who added the item into the job. Usual values are `CLIENT`, `PICKER`, `ISSUE`, `AGENT` or `CONTROL_TOWER`."
          },
          "photo_url": {
            "type": "string"
          },
          "found_quantity": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          },
          "barcodes": {
            "type": "array",
            "items": {}
          },
          "scannedBarcode": {
            "type": "string",
            "description": "Barcode scanned by the picker"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string"
              },
              "plu": {
                "type": "string"
              },
              "ean": {
                "type": "string",
                "description": "This value will be rendered on Control Tower."
              },
              "location": {
                "type": "string",
                "description": "The picker will see a tag indicating the product's location in the store."
              }
            }
          }
        }
      },
      "JobItemV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Indicates the status of the item. Possible values are `PENDING`, `ADDED`, `REPLACED`, `REJECTED_BY_USER`, `REJECTED_BY_DRIVER` or `REMOVED`."
          },
          "replacements": {
            "type": "array",
            "description": "Contains a list of possible replacements for this item.",
            "items": {}
          },
          "is_substitute": {
            "type": "boolean",
            "description": "Indicates if the item is a substitute."
          },
          "added_by": {
            "type": "string",
            "description": "Explains who added the item into the job. Usual values are `CLIENT`, `PICKER`, `ISSUE`, `AGENT` or `CONTROL_TOWER`."
          },
          "photo_url": {
            "type": "string"
          },
          "found_quantity": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string"
              },
              "plu": {
                "type": "string"
              },
              "ean": {
                "type": "string",
                "description": "This value will be rendered on Control Tower."
              },
              "location": {
                "type": "string",
                "description": "The picker will see a tag indicating the product's location in the store."
              }
            }
          },
          "quantity": {
            "type": "number"
          },
          "sub_quantity": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          },
          "sub_unit": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "weight": {
            "type": "number"
          },
          "volume": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "id",
          "quantity",
          "sub_quantity",
          "unit",
          "sub_unit",
          "price"
        ]
      },
      "jobItemV2Stock": {
        "type": "object",
        "properties": {
          "store_reference": {
            "type": "string"
          },
          "product": {
            "type": "object",
            "required": [
              "name",
              "photo_url",
              "quantity",
              "presentation",
              "attributes",
              "comment",
              "reference",
              "barcodes"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "photo_url": {
                "type": "string"
              },
              "quantity": {
                "type": "number"
              },
              "barcodes": {
                "type": "array",
                "description": "EAN Codes per each item. (Used for Scanner Integration) Separated by commas. Example: ['2000125','20021215','54545454'] minimum 1 item. Barcodes can't be null",
                "items": {}
              },
              "presentation": {
                "type": "object",
                "properties": {
                  "unit": {
                    "type": "string"
                  },
                  "sub_unit": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "number"
                  },
                  "sub_quantity": {
                    "type": "number"
                  },
                  "price": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "number"
                      },
                      "currency_code": {
                        "type": "string"
                      }
                    }
                  },
                  "weight": {
                    "type": "number"
                  },
                  "volume": {
                    "type": "number"
                  }
                }
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "category": {
                    "type": "string"
                  },
                  "sku": {
                    "type": "number"
                  }
                }
              },
              "comment": {
                "type": "string"
              },
              "reference": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "store_reference",
          "product"
        ]
      },
      "SlotItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "photo_url": {
            "type": "string"
          },
          "unit": {
            "type": "string",
            "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
          },
          "sub_unit": {
            "type": "string",
            "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
          },
          "quantity": {
            "type": "number"
          },
          "sub_quantity": {
            "type": "number"
          },
          "quantity_found_limits": {
            "description": "You can define the maximum and minimum quantity of the product that can be picked. This will allow restricting the quantities of the product that can be carried according to promotions or business decisions. `These parameters will take precedence over the global parameters.`",
            "properties": {
              "max": {
                "type": "number",
                "description": "Quantity of product in the unit defined above, which restricts the collector the maximum that he can select from a product."
              },
              "min": {
                "type": "number",
                "description": "Quantity of product in the unit defined above, which restricts the collector the minimum that he can select from a product."
              }
            }
          },
          "barcodes": {
            "type": "array",
            "description": "EAN Codes per each item. (Used for Scanner Integration) Separated by commas. Example: ['2000125','20021215','54545454'] minimum 1 item. Barcodes can't be null",
            "items": {}
          },
          "weight": {
            "type": "number",
            "description": "Should be specified in kilograms (kg)"
          },
          "volume": {
            "type": "number",
            "description": "Should be specified in liters (L)"
          },
          "price": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          },
          "attributes": {
            "properties": {
              "category": {
                "type": "string"
              },
              "plu": {
                "type": "string"
              },
              "ean": {
                "type": "string",
                "description": "This value will be rendered on Control Tower."
              },
              "location": {
                "type": "string",
                "description": "The picker will see a tag indicating the product's location in the store."
              },
              "picking_index": {
                "type": "string",
                "pattern": "^[0-9]+$",
                "description": "A number that will be used to order the products in the shopper app. In the case that is also sent the category or Location and these are configured in the database, the Shopper App will take the values of the Category or Location for its ordering."
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "unit",
          "quantity",
          "sub_unit",
          "sub_quantity",
          "price",
          "attributes"
        ]
      },
      "SlotItemSearchResults": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "photo_url": {
            "type": "string"
          },
          "unit": {
            "type": "string",
            "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
          },
          "sub_unit": {
            "type": "string",
            "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
          },
          "quantity": {
            "type": "number"
          },
          "sub_quantity": {
            "type": "number"
          },
          "weight": {
            "type": "number",
            "description": "Should be specified in kilograms (kg)"
          },
          "volume": {
            "type": "number",
            "description": "Should be specified in liters (L)"
          },
          "price": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          },
          "attributes": {
            "properties": {
              "category": {
                "type": "string"
              },
              "plu": {
                "type": "string"
              },
              "ean": {
                "type": "string",
                "description": "This value will be rendered on Control Tower."
              },
              "location": {
                "type": "string",
                "description": "The picker will see a tag indicating the product's location in the store."
              }
            }
          }
        }
      },
      "Recipient": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "identification": {
            "type": "object",
            "description": "(OPTIONAL) Customer/Recipient identification. This data is encrypted once it enters Instaleap systems.",
            "properties": {
              "number": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "Type of identification (Ex. NIF, VAT number, Cedula, Passport, etc"
              }
            }
          }
        },
        "required": [
          "name",
          "email",
          "phone_number"
        ]
      },
      "PaymentInfoJob": {
        "type": "object",
        "properties": {
          "currency_code": {
            "type": "string",
            "description": "Currency code as defined in the [ISO - 4217](https://es.wikipedia.org/wiki/ISO_4217) standard."
          },
          "prices": {
            "type": "object",
            "properties": {
              "subtotal": {
                "type": "number",
                "description": "Subtotal of the goods. Without taxes, discounts or shipping_fee."
              },
              "shipping_fee": {
                "type": "number",
                "description": "Fee charged to the customer for the shipping of goods."
              },
              "discounts": {
                "type": "number",
                "description": "Discounts applied to the customer."
              },
              "taxes": {
                "type": "number",
                "description": "Taxes charged to the customer."
              },
              "order_value": {
                "type": "number",
                "description": "The value to be paid for the order, it includes the price of the goods, taxes, discounts and shipping_fee."
              },
              "attributes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "ORDER_VALUE",
                        "SHIPPING_FEE",
                        "TAXES",
                        "DISCOUNTS",
                        "SUBTOTAL"
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "number"
                    }
                  },
                  "description": "Add here details of each item that is within the prices. Specify here if there is more than one value in any item. I.e, If the invoice charges a total of 100 in taxes divided in two subtypes, there will be two items, describing each fee, each one with a name and value",
                  "required": [
                    "type",
                    "name",
                    "value"
                  ]
                }
              },
              "additional_info": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "number"
                    }
                  },
                  "description": "Additional informacion about prices in the current job."
                }
              }
            },
            "required": [
              "order_value"
            ]
          },
          "payment": {
            "type": "object",
            "properties": {
              "id": {
                "description": "Internal Client ID of the payment type.",
                "nullable": true,
                "type": "string"
              },
              "payment_status": {
                "type": "string",
                "enum": [
                  "FAILED",
                  "SUCCEEDED",
                  "CHANGED",
                  "IN_PROGRESS",
                  "REVERTED"
                ],
                "description": "Status of the payment. It could be one of these 5 values: 1. 'FAILED': When the total payment of the order fails. If it is reported that the payment was failed, our system will automatically raise a flag in the order so that it can be resolved by an agent from the control tower. 2. 'SUCCEEDED': When the full payment of the order is successful. If you have a payment confirmation lock activated, when you receive this status, the Shopper App is unlocked. 3. 'CHANGED': Payment information has changed. 4. 'IN_PROGRESS': The payment is in progress. 5. 'REVERTED': The payment was completely reverted"
              },
              "method": {
                "type": "string",
                "enum": [
                  "CASH",
                  "PREPAID",
                  "PAYMENT_TERMINAL",
                  "LOYALTY_CARD",
                  "PAYMENT_LINK",
                  "TRANSFER"
                ],
                "description": "Defines the payment method intended to be used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK and TRANSFER (used in the picker app to get special prices from your catalogue)."
              },
              "reference": {
                "description": "Provide an identifier for the credit card. In case of credit/debit cards include the last 4 numbers registered for it (for example, VISA *3939).",
                "nullable": true,
                "type": "string"
              },
              "value": {
                "type": "number",
                "description": "Amount to be paid"
              },
              "payment_status_details": {
                "type": "string",
                "description": "Extra details of the payment status"
              },
              "method_details": {
                "type": "string",
                "description": "Extra details of the payment method"
              },
              "blocking_policy": {
                "type": "string",
                "description": "Desired Blocking Policy",
                "enum": [
                  "CHECKOUT",
                  "EXIT_STORE",
                  "UNBLOCKED"
                ]
              },
              "metadata": {
                "type": "object",
                "maxLength": 1000,
                "description": "Json object to add details or relevant information about the payment being processed"
              }
            },
            "required": [
              "method"
            ]
          }
        }
      },
      "Contactless": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "enum": [
              "LeaveAtTheDoor",
              "LeaveInReception"
            ],
            "description": "Used to set a delivery option, either in reception or at the door."
          },
          "cash_receiver": {
            "type": "string",
            "description": "Intended for name of person who will receive delivery."
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number of the secondary recipient."
          }
        },
        "required": [
          "comment",
          "cash_receiver",
          "phone_number"
        ]
      },
      "Step": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "payment": {
            "type": "string"
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the job as created in the Delivery Engine."
          },
          "status": {
            "type": "string",
            "description": "Describes the state of the Job."
          },
          "client_reference": {
            "type": "string",
            "description": "It is your internal reference of the Order/Job in your systems."
          },
          "declared_value": {
            "type": "number",
            "description": "Declared value of goods purchased."
          },
          "payment_value": {
            "type": "number",
            "description": "The value to paid for the goods."
          },
          "payment_method": {
            "type": "string",
            "description": "Defines the payment method intended to be used by the user. Options are CASH, PREPAID, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK, TRANSFER (used in the picker app to get special prices from your catalogue)."
          },
          "slot": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              },
              "expires_at": {
                "type": "string",
                "format": "date-time",
                "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
              }
            }
          },
          "recipient": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone_number": {
                "type": "string"
              },
              "identification": {
                "type": "object",
                "description": "(OPTIONAL) Customer/Recipient identification. This data is encrypted once it enters Instaleap systems.",
                "properties": {
                  "number": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of identification (Ex. NIF, VAT number, Cedula, Passport, etc"
                  }
                }
              }
            },
            "required": [
              "name",
              "email",
              "phone_number"
            ]
          },
          "origin": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "address_two": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              }
            },
            "required": [
              "name",
              "address",
              "latitude",
              "longitude"
            ]
          },
          "destination": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "address_two": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              }
            },
            "required": [
              "name",
              "address",
              "latitude",
              "longitude"
            ]
          },
          "job_items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "description": "Indicates the status of the item. Possible values are `PENDING`, `ADDED`, `REPLACED`, `REJECTED_BY_USER`, `REJECTED_BY_DRIVER` or `REMOVED`."
                },
                "added_by": {
                  "type": "string",
                  "description": "Explains who added the item into the job. Usual values are `CLIENT`, `PICKER`, `ISSUE`, `AGENT` or `CONTROL_TOWER`."
                },
                "photo_url": {
                  "type": "string"
                },
                "quantity": {
                  "type": "number"
                },
                "found_quantity": {
                  "type": "number"
                },
                "presentation": {
                  "type": "object",
                  "properties": {
                    "quantity": {
                      "type": "number"
                    },
                    "unit": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "price": {
                      "type": "number"
                    },
                    "weight": {
                      "type": "number"
                    },
                    "dimensions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "length": {
                            "type": "number"
                          },
                          "width": {
                            "type": "number"
                          },
                          "height": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "quantity",
                    "unit",
                    "price"
                  ]
                },
                "comment": {
                  "type": "string"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string"
                    },
                    "plu": {
                      "type": "string"
                    },
                    "ean": {
                      "type": "string",
                      "description": "This value will be rendered on Control Tower."
                    },
                    "location": {
                      "type": "string",
                      "description": "The picker will see a tag indicating the product's location in the store."
                    }
                  }
                }
              },
              "required": [
                "name",
                "id",
                "quantity",
                "presentation"
              ]
            }
          },
          "volume": {
            "type": "number",
            "description": "Estimated volume in cubic centimeters."
          },
          "weight": {
            "type": "number",
            "description": "Estimated weight in grams."
          },
          "issue_of": {
            "type": "string",
            "description": "Indicates if the job is of type issue. Issues are used to deliver items when they are not accepted. WARNING: This attribute is going to be `null` for the majority of jobs."
          },
          "tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "resource_id": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "payment": {
                  "type": "string"
                },
                "steps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AvailabilityGet": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "address_two": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              }
            },
            "required": [
              "name",
              "address",
              "latitude",
              "longitude"
            ]
          },
          "destination": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "address_two": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              }
            },
            "required": [
              "name",
              "address",
              "latitude",
              "longitude"
            ]
          },
          "job_items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "photo_url": {
                  "type": "string"
                },
                "unit": {
                  "type": "string",
                  "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                },
                "sub_unit": {
                  "type": "string",
                  "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                },
                "quantity": {
                  "type": "number"
                },
                "sub_quantity": {
                  "type": "number"
                },
                "quantity_found_limits": {
                  "description": "You can define the maximum and minimum quantity of the product that can be picked. This will allow restricting the quantities of the product that can be carried according to promotions or business decisions. `These parameters will take precedence over the global parameters.`",
                  "properties": {
                    "max": {
                      "type": "number",
                      "description": "Quantity of product in the unit defined above, which restricts the collector the maximum that he can select from a product."
                    },
                    "min": {
                      "type": "number",
                      "description": "Quantity of product in the unit defined above, which restricts the collector the minimum that he can select from a product."
                    }
                  }
                },
                "barcodes": {
                  "type": "array",
                  "description": "EAN Codes per each item. (Used for Scanner Integration) Separated by commas. Example: ['2000125','20021215','54545454'] minimum 1 item. Barcodes can't be null",
                  "items": {}
                },
                "weight": {
                  "type": "number",
                  "description": "Should be specified in kilograms (kg)"
                },
                "volume": {
                  "type": "number",
                  "description": "Should be specified in liters (L)"
                },
                "price": {
                  "type": "number"
                },
                "comment": {
                  "type": "string"
                },
                "attributes": {
                  "properties": {
                    "category": {
                      "type": "string"
                    },
                    "plu": {
                      "type": "string"
                    },
                    "ean": {
                      "type": "string",
                      "description": "This value will be rendered on Control Tower."
                    },
                    "location": {
                      "type": "string",
                      "description": "The picker will see a tag indicating the product's location in the store."
                    },
                    "picking_index": {
                      "type": "string",
                      "pattern": "^[0-9]+$",
                      "description": "A number that will be used to order the products in the shopper app. In the case that is also sent the category or Location and these are configured in the database, the Shopper App will take the values of the Category or Location for its ordering."
                    }
                  }
                }
              },
              "required": [
                "id",
                "name",
                "unit",
                "quantity",
                "sub_unit",
                "sub_quantity",
                "price",
                "attributes"
              ]
            }
          }
        }
      },
      "AvailabilityGetV2": {
        "type": "object",
        "properties": {
          "currency_code": {
            "type": "string",
            "description": "Currency code as defined in the [ISO - 4217](https://es.wikipedia.org/wiki/ISO_4217) standard."
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601). It must be at most five minutes before the current date."
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601). It must be at most seven days after the start date"
          },
          "slot_size": {
            "type": "number",
            "description": "Maximum size of the slots in minutes.  \n Must be a multiple of 15."
          },
          "minimum_slot_size": {
            "type": "number",
            "description": "Minimum size of the slots in minutes. \n Must be a multiple of 15."
          },
          "operational_models_priority": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PICK_AND_DELIVERY_WITH_STORAGE_NO_TRANSFER",
                "PICK_AND_DELIVERY",
                "FULL_SERVICE",
                "PICK_AND_COLLECT",
                "PICK_AND_COLLECT_NO_TRANSFER",
                "PICK_AND_DELIVERY_WITH_STORAGE",
                "ZONE_PICKING_AND_DELIVERY_WITH_STORAGE",
                "ZONE_PICKING_AND_COLLECT"
              ]
            },
            "description": "Its default value will be the following list/array: ['PICK_AND_DELIVERY_WITH_STORAGE_NO_TRANSFER', 'PICK_AND_DELIVERY', 'FULL_SERVICE', 'PICK_AND_COLLECT', 'PICK_AND_COLLECT_NO_TRANSFER', 'PICK_AND_DELIVERY_WITH_STORAGE', 'ZONE_PICKING_AND_DELIVERY_WITH_STORAGE','ZONE_PICKING_AND_COLLECT'] \n \nThe items in the array represent which operational models will be taken into account. The order represents their priority. The first item in the list/array is the one with the higher priority"
          },
          "fallback": {
            "type": "boolean",
            "description": "Its default value is false. \n If this option is active and there is no capacity for the current request a set of PICK AND DELIVERY slots will be returned."
          },
          "store_reference": {
            "type": "string",
            "description": "It's the store id to identify it into your system."
          },
          "origin": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "address_two": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              }
            },
            "required": [
              "name",
              "address",
              "latitude",
              "longitude"
            ]
          },
          "destination": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "address_two": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              }
            },
            "required": [
              "name",
              "address",
              "latitude",
              "longitude"
            ]
          },
          "job_items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "photo_url": {
                  "type": "string"
                },
                "unit": {
                  "type": "string",
                  "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                },
                "sub_unit": {
                  "type": "string",
                  "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                },
                "quantity": {
                  "type": "number"
                },
                "sub_quantity": {
                  "type": "number"
                },
                "quantity_found_limits": {
                  "description": "You can define the maximum and minimum quantity of the product that can be picked. This will allow restricting the quantities of the product that can be carried according to promotions or business decisions. `These parameters will take precedence over the global parameters.`",
                  "properties": {
                    "max": {
                      "type": "number",
                      "description": "Quantity of product in the unit defined above, which restricts the collector the maximum that he can select from a product."
                    },
                    "min": {
                      "type": "number",
                      "description": "Quantity of product in the unit defined above, which restricts the collector the minimum that he can select from a product."
                    }
                  }
                },
                "barcodes": {
                  "type": "array",
                  "description": "EAN Codes per each item. (Used for Scanner Integration) Separated by commas. Example: ['2000125','20021215','54545454'] minimum 1 item. Barcodes can't be null",
                  "items": {}
                },
                "weight": {
                  "type": "number",
                  "description": "Should be specified in kilograms (kg)"
                },
                "volume": {
                  "type": "number",
                  "description": "Should be specified in liters (L)"
                },
                "price": {
                  "type": "number"
                },
                "comment": {
                  "type": "string"
                },
                "attributes": {
                  "properties": {
                    "category": {
                      "type": "string"
                    },
                    "plu": {
                      "type": "string"
                    },
                    "ean": {
                      "type": "string",
                      "description": "This value will be rendered on Control Tower."
                    },
                    "location": {
                      "type": "string",
                      "description": "The picker will see a tag indicating the product's location in the store."
                    },
                    "picking_index": {
                      "type": "string",
                      "pattern": "^[0-9]+$",
                      "description": "A number that will be used to order the products in the shopper app. In the case that is also sent the category or Location and these are configured in the database, the Shopper App will take the values of the Category or Location for its ordering."
                    }
                  }
                }
              },
              "required": [
                "id",
                "name",
                "unit",
                "quantity",
                "sub_unit",
                "sub_quantity",
                "price",
                "attributes"
              ]
            }
          }
        },
        "required": [
          "currency_code",
          "start",
          "end",
          "slot_size",
          "operational_models_priority",
          "origin",
          "destination",
          "job_items",
          "store_reference"
        ]
      },
      "JobCreate": {
        "type": "object",
        "properties": {
          "slot_id": {
            "type": "string"
          },
          "client_reference": {
            "type": "string",
            "description": "OrderId or equivalent reference created in your backend for the job to be created."
          },
          "recipient": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone_number": {
                "type": "string"
              },
              "identification": {
                "type": "object",
                "description": "(OPTIONAL) Customer/Recipient identification. This data is encrypted once it enters Instaleap systems.",
                "properties": {
                  "number": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of identification (Ex. NIF, VAT number, Cedula, Passport, etc"
                  }
                }
              }
            },
            "required": [
              "name",
              "email",
              "phone_number"
            ]
          },
          "payment_info": {
            "type": "object",
            "properties": {
              "currency_code": {
                "type": "string",
                "description": "Currency code as defined in the [ISO - 4217](https://es.wikipedia.org/wiki/ISO_4217) standard."
              },
              "prices": {
                "type": "object",
                "properties": {
                  "subtotal": {
                    "type": "number",
                    "description": "Subtotal of the goods. Without taxes, discounts or shipping_fee."
                  },
                  "shipping_fee": {
                    "type": "number",
                    "description": "Fee charged to the customer for the shipping of goods."
                  },
                  "discounts": {
                    "type": "number",
                    "description": "Discounts applied to the customer."
                  },
                  "taxes": {
                    "type": "number",
                    "description": "Taxes charged to the customer."
                  },
                  "order_value": {
                    "type": "number",
                    "description": "The value to be paid for the order, it includes the price of the goods, taxes, discounts and shipping_fee."
                  },
                  "attributes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "ORDER_VALUE",
                            "SHIPPING_FEE",
                            "TAXES",
                            "DISCOUNTS",
                            "SUBTOTAL"
                          ]
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "number"
                        }
                      },
                      "description": "Add here details of each item that is within the prices. Specify here if there is more than one value in any item. I.e, If the invoice charges a total of 100 in taxes divided in two subtypes, there will be two items, describing each fee, each one with a name and value",
                      "required": [
                        "type",
                        "name",
                        "value"
                      ]
                    }
                  },
                  "additional_info": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "number"
                        }
                      },
                      "description": "Additional informacion about prices in the current job."
                    }
                  }
                },
                "required": [
                  "order_value"
                ]
              },
              "payment": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "Internal Client ID of the payment type.",
                    "nullable": true,
                    "type": "string"
                  },
                  "payment_status": {
                    "type": "string",
                    "enum": [
                      "FAILED",
                      "SUCCEEDED",
                      "CHANGED",
                      "IN_PROGRESS",
                      "REVERTED"
                    ],
                    "description": "Status of the payment. It could be one of these 5 values: 1. 'FAILED': When the total payment of the order fails. If it is reported that the payment was failed, our system will automatically raise a flag in the order so that it can be resolved by an agent from the control tower. 2. 'SUCCEEDED': When the full payment of the order is successful. If you have a payment confirmation lock activated, when you receive this status, the Shopper App is unlocked. 3. 'CHANGED': Payment information has changed. 4. 'IN_PROGRESS': The payment is in progress. 5. 'REVERTED': The payment was completely reverted"
                  },
                  "method": {
                    "type": "string",
                    "enum": [
                      "CASH",
                      "PREPAID",
                      "PAYMENT_TERMINAL",
                      "LOYALTY_CARD",
                      "PAYMENT_LINK",
                      "TRANSFER"
                    ],
                    "description": "Defines the payment method intended to be used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK and TRANSFER (used in the picker app to get special prices from your catalogue)."
                  },
                  "reference": {
                    "description": "Provide an identifier for the credit card. In case of credit/debit cards include the last 4 numbers registered for it (for example, VISA *3939).",
                    "nullable": true,
                    "type": "string"
                  },
                  "value": {
                    "type": "number",
                    "description": "Amount to be paid"
                  },
                  "payment_status_details": {
                    "type": "string",
                    "description": "Extra details of the payment status"
                  },
                  "method_details": {
                    "type": "string",
                    "description": "Extra details of the payment method"
                  },
                  "blocking_policy": {
                    "type": "string",
                    "description": "Desired Blocking Policy",
                    "enum": [
                      "CHECKOUT",
                      "EXIT_STORE",
                      "UNBLOCKED"
                    ]
                  },
                  "metadata": {
                    "type": "object",
                    "maxLength": 1000,
                    "description": "Json object to add details or relevant information about the payment being processed"
                  }
                },
                "required": [
                  "method"
                ]
              }
            }
          },
          "add_delivery_code": {
            "type": "boolean",
            "default": true,
            "description": "Used to force the driver to complete the order with a delivery code. Default value is `true`."
          },
          "job_comment": {
            "type": "string",
            "description": "General order comments can be captured in this field."
          },
          "contact_less": {
            "type": "object",
            "properties": {
              "comment": {
                "type": "string",
                "enum": [
                  "LeaveAtTheDoor",
                  "LeaveInReception"
                ],
                "description": "Used to set a delivery option, either in reception or at the door."
              },
              "cash_receiver": {
                "type": "string",
                "description": "Intended for name of person who will receive delivery."
              },
              "phone_number": {
                "type": "string",
                "description": "Phone number of the secondary recipient."
              }
            },
            "required": [
              "comment",
              "cash_receiver",
              "phone_number"
            ]
          },
          "external_data": {
            "type": "object",
            "description": "You can inform the resource about any additional data to register the order. This information can be submitted in create order or updated later with the endpoint external_data (link). You can send the information to `shopperApp`, `control tower`, or `webhook`.",
            "properties": {
              "webhook": {
                "type": "object"
              },
              "backoffice": {
                "type": "object"
              },
              "shopper_app": {
                "type": "object"
              }
            }
          }
        },
        "required": [
          "slot_id",
          "client_reference",
          "recipient"
        ]
      },
      "OriginWebhook": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "store_reference": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "address_two": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "address",
          "latitude",
          "longitude"
        ]
      },
      "RecipientWebhook": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "identification": {
            "type": "object",
            "description": "Customer/Recipient identification. Identification number and type are encrypted with an aes-256-cbc algorithm. Encryption it's made using your webhook token as key and a randomized iv (identification vector). The result of the decryption process is an object including identification number and type. You can find an example of encryption/decryption here https://repl.it/@DavidFelipeFel9/CryptoAnxiousPayware#index.js",
            "properties": {
              "iv": {
                "type": "string",
                "description": "Initialization vector requried to decrypt the identification"
              },
              "encryptedData": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "name",
          "email",
          "phone_number"
        ]
      },
      "JobWebhook": {
        "type": "object",
        "properties": {
          "job_items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "description": "Indicates the status of the item. Possible values are `PENDING`, `ADDED`, `REPLACED`, `REJECTED_BY_USER`, `REJECTED_BY_DRIVER` or `REMOVED`."
                },
                "replacements": {
                  "type": "string"
                },
                "is_substitute": {
                  "type": "string"
                },
                "added_by": {
                  "type": "string",
                  "description": "Explains who added the item into the job. Usual values are `CLIENT`, `PICKER`, `ISSUE`, `AGENT` or `CONTROL_TOWER`."
                },
                "photo_url": {
                  "type": "string"
                },
                "found_quantity": {
                  "type": "number"
                },
                "comment": {
                  "type": "string"
                },
                "barcodes": {
                  "type": "array",
                  "items": {}
                },
                "scannedBarcode": {
                  "type": "string",
                  "description": "Barcode scanned by the picker"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string"
                    },
                    "plu": {
                      "type": "string"
                    },
                    "ean": {
                      "type": "string",
                      "description": "This value will be rendered on Control Tower."
                    },
                    "location": {
                      "type": "string",
                      "description": "The picker will see a tag indicating the product's location in the store."
                    }
                  }
                }
              }
            }
          },
          "id": {
            "type": "string",
            "description": "Identifier of the job as created in the Delivery Engine."
          },
          "status": {
            "type": "string",
            "description": "Describes the state of the Job."
          },
          "client_reference": {
            "type": "string",
            "description": "OrderId or equivalent reference created in your backend for the job to be created."
          },
          "declared_value": {
            "type": "number",
            "description": "Declared value of goods purchased."
          },
          "payment_value": {
            "type": "number",
            "description": "The value to paid for the goods."
          },
          "payment_method": {
            "type": "string",
            "description": "Defines the payment method intended to be used by the user. Options are CASH, PREPAID, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK, TRANSFER (used in the picker app to get special prices from your catalogue)."
          },
          "slot": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              },
              "expires_at": {
                "type": "string",
                "format": "date-time",
                "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
              }
            }
          },
          "recipient": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone_number": {
                "type": "string"
              },
              "identification": {
                "type": "object",
                "description": "Customer/Recipient identification. Identification number and type are encrypted with an aes-256-cbc algorithm. Encryption it's made using your webhook token as key and a randomized iv (identification vector). The result of the decryption process is an object including identification number and type. You can find an example of encryption/decryption here https://repl.it/@DavidFelipeFel9/CryptoAnxiousPayware#index.js",
                "properties": {
                  "iv": {
                    "type": "string",
                    "description": "Initialization vector requried to decrypt the identification"
                  },
                  "encryptedData": {
                    "type": "string"
                  }
                }
              }
            },
            "required": [
              "name",
              "email",
              "phone_number"
            ]
          },
          "origin": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "store_reference": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "address_two": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              }
            },
            "required": [
              "name",
              "address",
              "latitude",
              "longitude"
            ]
          },
          "destination": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "address_two": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              }
            },
            "required": [
              "name",
              "address",
              "latitude",
              "longitude"
            ]
          },
          "volume": {
            "type": "number",
            "description": "Estimated volume in cubic centimeters."
          },
          "weight": {
            "type": "number",
            "description": "Estimated weight in grams."
          },
          "issue_of": {
            "type": "string",
            "description": "Indicates if the job is of type issue. Issues are used to deliver items when they are not accepted. WARNING: This attribute is going to be `null` for the majority of jobs."
          },
          "tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "resource_id": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "payment": {
                  "type": "string"
                },
                "steps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TrackingEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601)."
          },
          "type": {
            "type": "string"
          },
          "job": {
            "type": "object",
            "properties": {
              "job_items": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "description": "Indicates the status of the item. Possible values are `PENDING`, `ADDED`, `REPLACED`, `REJECTED_BY_USER`, `REJECTED_BY_DRIVER` or `REMOVED`."
                    },
                    "replacements": {
                      "type": "string"
                    },
                    "is_substitute": {
                      "type": "string"
                    },
                    "added_by": {
                      "type": "string",
                      "description": "Explains who added the item into the job. Usual values are `CLIENT`, `PICKER`, `ISSUE`, `AGENT` or `CONTROL_TOWER`."
                    },
                    "photo_url": {
                      "type": "string"
                    },
                    "found_quantity": {
                      "type": "number"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "barcodes": {
                      "type": "array",
                      "items": {}
                    },
                    "scannedBarcode": {
                      "type": "string",
                      "description": "Barcode scanned by the picker"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string"
                        },
                        "plu": {
                          "type": "string"
                        },
                        "ean": {
                          "type": "string",
                          "description": "This value will be rendered on Control Tower."
                        },
                        "location": {
                          "type": "string",
                          "description": "The picker will see a tag indicating the product's location in the store."
                        }
                      }
                    }
                  }
                }
              },
              "id": {
                "type": "string",
                "description": "Identifier of the job as created in the Delivery Engine."
              },
              "status": {
                "type": "string",
                "description": "Describes the state of the Job."
              },
              "client_reference": {
                "type": "string",
                "description": "OrderId or equivalent reference created in your backend for the job to be created."
              },
              "declared_value": {
                "type": "number",
                "description": "Declared value of goods purchased."
              },
              "payment_value": {
                "type": "number",
                "description": "The value to paid for the goods."
              },
              "payment_method": {
                "type": "string",
                "description": "Defines the payment method intended to be used by the user. Options are CASH, PREPAID, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK, TRANSFER (used in the picker app to get special prices from your catalogue)."
              },
              "slot": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "to": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
                  }
                }
              },
              "recipient": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "identification": {
                    "type": "object",
                    "description": "Customer/Recipient identification. Identification number and type are encrypted with an aes-256-cbc algorithm. Encryption it's made using your webhook token as key and a randomized iv (identification vector). The result of the decryption process is an object including identification number and type. You can find an example of encryption/decryption here https://repl.it/@DavidFelipeFel9/CryptoAnxiousPayware#index.js",
                    "properties": {
                      "iv": {
                        "type": "string",
                        "description": "Initialization vector requried to decrypt the identification"
                      },
                      "encryptedData": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "name",
                  "email",
                  "phone_number"
                ]
              },
              "origin": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "store_reference": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "address_two": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip_code": {
                    "type": "string"
                  },
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                },
                "required": [
                  "name",
                  "address",
                  "latitude",
                  "longitude"
                ]
              },
              "destination": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "address_two": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip_code": {
                    "type": "string"
                  },
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                },
                "required": [
                  "name",
                  "address",
                  "latitude",
                  "longitude"
                ]
              },
              "volume": {
                "type": "number",
                "description": "Estimated volume in cubic centimeters."
              },
              "weight": {
                "type": "number",
                "description": "Estimated weight in grams."
              },
              "issue_of": {
                "type": "string",
                "description": "Indicates if the job is of type issue. Issues are used to deliver items when they are not accepted. WARNING: This attribute is going to be `null` for the majority of jobs."
              },
              "tasks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "resource_id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "payment": {
                      "type": "string"
                    },
                    "steps": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "state": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "TrackingEventV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601)."
          },
          "type": {
            "type": "string"
          },
          "clientId": {
            "type": "string",
            "description": "Internal Instaleap ClientID"
          },
          "job": {
            "type": "object",
            "properties": {
              "job_items": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "description": "Indicates the status of the item. Possible values are `PENDING`, `ADDED`, `REPLACED`, `REJECTED_BY_USER`, `REJECTED_BY_DRIVER` or `REMOVED`."
                    },
                    "replacements": {
                      "type": "string"
                    },
                    "is_substitute": {
                      "type": "string"
                    },
                    "added_by": {
                      "type": "string",
                      "description": "Explains who added the item into the job. Usual values are `CLIENT`, `PICKER`, `ISSUE`, `AGENT` or `CONTROL_TOWER`."
                    },
                    "photo_url": {
                      "type": "string"
                    },
                    "found_quantity": {
                      "type": "number"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "barcodes": {
                      "type": "array",
                      "items": {}
                    },
                    "scannedBarcode": {
                      "type": "string",
                      "description": "Barcode scanned by the picker"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string"
                        },
                        "plu": {
                          "type": "string"
                        },
                        "ean": {
                          "type": "string",
                          "description": "This value will be rendered on Control Tower."
                        },
                        "location": {
                          "type": "string",
                          "description": "The picker will see a tag indicating the product's location in the store."
                        }
                      }
                    }
                  }
                }
              },
              "id": {
                "type": "string",
                "description": "Identifier of the job as created in the Delivery Engine."
              },
              "status": {
                "type": "string",
                "description": "Describes the state of the Job."
              },
              "client_reference": {
                "type": "string",
                "description": "OrderId or equivalent reference created in your backend for the job to be created."
              },
              "declared_value": {
                "type": "number",
                "description": "Declared value of goods purchased."
              },
              "payment_value": {
                "type": "number",
                "description": "The value to paid for the goods."
              },
              "payment_method": {
                "type": "string",
                "description": "Defines the payment method intended to be used by the user. Options are CASH, PREPAID, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK, TRANSFER (used in the picker app to get special prices from your catalogue)."
              },
              "slot": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "from": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "to": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Expiration date for the slot. Slots are dynamic and they are reserved for a specific amount of time."
                  }
                }
              },
              "recipient": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "identification": {
                    "type": "object",
                    "description": "Customer/Recipient identification. Identification number and type are encrypted with an aes-256-cbc algorithm. Encryption it's made using your webhook token as key and a randomized iv (identification vector). The result of the decryption process is an object including identification number and type. You can find an example of encryption/decryption here https://repl.it/@DavidFelipeFel9/CryptoAnxiousPayware#index.js",
                    "properties": {
                      "iv": {
                        "type": "string",
                        "description": "Initialization vector requried to decrypt the identification"
                      },
                      "encryptedData": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "name",
                  "email",
                  "phone_number"
                ]
              },
              "origin": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "store_reference": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "address_two": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip_code": {
                    "type": "string"
                  },
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                },
                "required": [
                  "name",
                  "address",
                  "latitude",
                  "longitude"
                ]
              },
              "destination": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "address_two": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip_code": {
                    "type": "string"
                  },
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                },
                "required": [
                  "name",
                  "address",
                  "latitude",
                  "longitude"
                ]
              },
              "volume": {
                "type": "number",
                "description": "Estimated volume in cubic centimeters."
              },
              "weight": {
                "type": "number",
                "description": "Estimated weight in grams."
              },
              "issue_of": {
                "type": "string",
                "description": "Indicates if the job is of type issue. Issues are used to deliver items when they are not accepted. WARNING: This attribute is going to be `null` for the majority of jobs."
              },
              "tasks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "resource_id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "payment": {
                      "type": "string"
                    },
                    "steps": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "state": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "ChatNotification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601)."
          },
          "sender": {
            "type": "string",
            "description": "Tells you the role sending the message. Possible values are  `SH`  picker or delivery or  `SUP`  support."
          },
          "job_id": {
            "type": "string",
            "description": "Id of the job associated to the chat."
          },
          "notification_message": {
            "type": "string",
            "description": "Sender's message"
          }
        }
      },
      "UnprocessableItemError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "Error's location"
              },
              "param": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              }
            }
          }
        }
      },
      "ItemError": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "description": "Error's location"
          },
          "param": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          }
        }
      },
      "AddNewItem": {
        "type": "object",
        "properties": {
          "item_to_add": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "photo_url": {
                "type": "string"
              },
              "unit": {
                "type": "string",
                "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
              },
              "sub_unit": {
                "type": "string",
                "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
              },
              "quantity": {
                "type": "number"
              },
              "sub_quantity": {
                "type": "number"
              },
              "quantity_found_limits": {
                "description": "You can define the maximum and minimum quantity of the product that can be picked. This will allow restricting the quantities of the product that can be carried according to promotions or business decisions. `These parameters will take precedence over the global parameters.`",
                "properties": {
                  "max": {
                    "type": "number",
                    "description": "Quantity of product in the unit defined above, which restricts the collector the maximum that he can select from a product."
                  },
                  "min": {
                    "type": "number",
                    "description": "Quantity of product in the unit defined above, which restricts the collector the minimum that he can select from a product."
                  }
                }
              },
              "barcodes": {
                "type": "array",
                "description": "EAN Codes per each item. (Used for Scanner Integration) Separated by commas. Example: ['2000125','20021215','54545454'] minimum 1 item. Barcodes can't be null",
                "items": {}
              },
              "weight": {
                "type": "number",
                "description": "Should be specified in kilograms (kg)"
              },
              "volume": {
                "type": "number",
                "description": "Should be specified in liters (L)"
              },
              "price": {
                "type": "number"
              },
              "comment": {
                "type": "string"
              },
              "attributes": {
                "properties": {
                  "category": {
                    "type": "string"
                  },
                  "plu": {
                    "type": "string"
                  },
                  "ean": {
                    "type": "string",
                    "description": "This value will be rendered on Control Tower."
                  },
                  "location": {
                    "type": "string",
                    "description": "The picker will see a tag indicating the product's location in the store."
                  },
                  "picking_index": {
                    "type": "string",
                    "pattern": "^[0-9]+$",
                    "description": "A number that will be used to order the products in the shopper app. In the case that is also sent the category or Location and these are configured in the database, the Shopper App will take the values of the Category or Location for its ordering."
                  }
                }
              }
            },
            "required": [
              "id",
              "name",
              "unit",
              "quantity",
              "sub_unit",
              "sub_quantity",
              "price",
              "attributes"
            ]
          }
        },
        "required": [
          "item_to_add"
        ]
      },
      "updateItemsOnJob": {
        "type": "object",
        "properties": {
          "values": {
            "type": "object",
            "description": "The object with the attributes of the item that you want to update",
            "properties": {
              "state": {
                "type": "string",
                "description": "State of the item. Send CANCELLED to cancel an existing item inside a Job"
              },
              "quantity": {
                "type": "number",
                "description": "Quantity of the item"
              },
              "comment": {
                "type": "string",
                "description": "Comment of the item"
              }
            }
          }
        },
        "required": [
          "values"
        ]
      },
      "updateJobComment": {
        "type": "object",
        "properties": {
          "job_comment": {
            "type": "string",
            "description": "The new comment for the existing Job."
          }
        },
        "required": [
          "job_comment"
        ]
      },
      "updateJobExternalData": {
        "type": "object",
        "properties": {
          "external_data": {
            "type": "object",
            "description": "The new external data for the existing Job.",
            "properties": {
              "webhook": {
                "type": "object"
              },
              "backoffice": {
                "type": "object"
              },
              "shopper_app": {
                "type": "object"
              }
            }
          }
        },
        "required": [
          "external_data"
        ]
      },
      "PaymentInfo": {
        "type": "object",
        "properties": {
          "prices": {
            "type": "object",
            "properties": {
              "subtotal": {
                "type": "number",
                "description": "Subtotal of the goods. Without taxes, discounts or shipping_fee."
              },
              "shipping_fee": {
                "type": "number",
                "description": "Fee charged to the customer for the shipping of goods."
              },
              "discounts": {
                "type": "number",
                "description": "Discounts applied to the customer."
              },
              "taxes": {
                "type": "number",
                "description": "Taxes charged to the customer."
              },
              "order_value": {
                "type": "number",
                "description": "The value to be paid for the order, it includes the price of the goods, taxes, discounts and shipping_fee."
              },
              "attributes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "ORDER_VALUE",
                        "SHIPPING_FEE",
                        "TAXES",
                        "DISCOUNTS",
                        "SUBTOTAL"
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "number"
                    }
                  },
                  "description": "Add here details of each item that is within the prices. Specify here if there is more than one value in any item. I.e, If the invoice charges a total of 100 in taxes divided in two subtypes, there will be two items, describing each fee, each one with a name and value",
                  "required": [
                    "type",
                    "name",
                    "value"
                  ]
                }
              },
              "additional_info": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "number"
                    }
                  },
                  "description": "Additional informacion about prices in the current job."
                }
              }
            },
            "required": [
              "subtotal",
              "shipping_fee",
              "discounts",
              "taxes",
              "order_value",
              "attributes"
            ]
          },
          "payment": {
            "type": "object",
            "properties": {
              "id": {
                "description": "Internal Client ID of the payment type.",
                "nullable": true,
                "type": "string"
              },
              "payment_status": {
                "type": "string",
                "enum": [
                  "FAILED",
                  "SUCCEEDED",
                  "CHANGED",
                  "IN_PROGRESS",
                  "REVERTED"
                ],
                "description": "Status of the payment. It could be one of these 5 values: 1. 'FAILED': When the total payment of the order fails. If it is reported that the payment was failed, our system will automatically raise a flag in the order so that it can be resolved by an agent from the control tower. 2. 'SUCCEEDED': When the full payment of the order is successful. If you have a payment confirmation lock activated, when you receive this status, the Shopper App is unlocked. 3. 'CHANGED': Payment information has changed. 4. 'IN_PROGRESS': The payment is in progress. 5. 'REVERTED': The payment was completely reverted"
              },
              "method": {
                "type": "string",
                "enum": [
                  "CASH",
                  "PREPAID",
                  "PAYMENT_TERMINAL",
                  "LOYALTY_CARD",
                  "PAYMENT_LINK",
                  "TRANSFER"
                ],
                "description": "Defines the payment method intended to be used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK and TRANSFER (used in the picker app to get special prices from your catalogue)."
              },
              "reference": {
                "description": "Provide an identifier for the credit card. In case of credit/debit cards include the last 4 numbers registered for it (for example, VISA *3939).",
                "nullable": true,
                "type": "string"
              },
              "value": {
                "type": "number",
                "description": "Amount to be paid"
              },
              "payment_status_details": {
                "type": "string",
                "description": "Extra details of the payment status"
              },
              "method_details": {
                "type": "string",
                "description": "Extra details of the payment method"
              },
              "blocking_policy": {
                "type": "string",
                "description": "Desired Blocking Policy",
                "enum": [
                  "CHECKOUT",
                  "EXIT_STORE",
                  "UNBLOCKED"
                ]
              },
              "metadata": {
                "type": "object",
                "maxLength": 1000,
                "description": "Json object to add details or relevant information about the payment being processed"
              }
            },
            "required": [
              "id",
              "payment_status",
              "method",
              "reference",
              "value"
            ]
          },
          "invoice": {
            "type": "object",
            "properties": {
              "reference": {
                "type": "string",
                "description": "Invoice number or reference."
              },
              "attachments": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "(Optional) Array of URL's related to the PDF/Images to find the invoice on your systems."
              }
            },
            "required": [
              "reference",
              "attachments"
            ]
          }
        }
      },
      "UpdatePrices": {
        "type": "object",
        "properties": {
          "shipping_fee": {
            "type": "number",
            "description": "Fee charged to the customer for the shipping of goods."
          },
          "taxes": {
            "type": "number",
            "description": "Taxes charged to the customer."
          },
          "discounts": {
            "type": "number",
            "description": "Discounts applied to the customer."
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal of the goods. Without taxes, discounts or shipping_fee."
          },
          "payment_value": {
            "type": "number",
            "description": "The value to be paid for the order, it includes the price of the goods, taxes, discounts and shipping_fee."
          },
          "invoice": {
            "type": "object",
            "description": "Optional object to send invoice related information to Instaleap. `Sending this automatically marks the checkout step in shopper app as completed.`",
            "properties": {
              "reference": {
                "type": "string",
                "description": "Invoice number or reference."
              },
              "attachments": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "(Optional) Array of URL's related to the PDF/Images to find the invoice on your systems."
              }
            }
          }
        },
        "required": [
          "shipping_fee",
          "taxes",
          "discounts",
          "subtotal",
          "payment_value"
        ]
      },
      "UpdatePayment": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Can be SUCCESS to confirm payment or FAILED to continue blocking and raise a flag."
          },
          "payment_method": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Internal Client ID of the payment type."
              },
              "type": {
                "type": "string",
                "description": "Defines the payment method intended to be used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD (used in the picker app to get special prices from your catalogue)."
              },
              "reference": {
                "type": "string",
                "description": "Provide an identifier for the credit card. In case of credit/debit cards include the last 4 numbers registered for it (for example, VISA *3939)."
              }
            }
          },
          "summary": {
            "type": "object",
            "properties": {
              "shipping_fee": {
                "type": "number",
                "description": "Fee charged to the customer for the shipping of goods."
              },
              "taxes": {
                "type": "number",
                "description": "Taxes charged to the customer."
              },
              "discounts": {
                "type": "number",
                "description": "Discounts applied to the customer."
              },
              "subtotal": {
                "type": "number",
                "description": "Subtotal of the goods. Without taxes, discounts or shipping_fee."
              },
              "payment_value": {
                "type": "number",
                "description": "The value to be paid for the order, it includes the price of the goods, taxes, discounts and shipping_fee."
              },
              "invoice": {
                "type": "object",
                "description": "Optional object to send invoice related information to Instaleap. `Sending this automatically marks the checkout step in shopper app as completed.`",
                "properties": {
                  "reference": {
                    "type": "string",
                    "description": "Invoice number or reference."
                  },
                  "attachments": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "(Optional) Array of URL's related to the PDF/Images to find the invoice on your systems."
                  }
                }
              }
            },
            "required": [
              "shipping_fee",
              "taxes",
              "discounts",
              "subtotal",
              "payment_value"
            ]
          }
        }
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal Client ID of the payment type."
          },
          "type": {
            "type": "string",
            "description": "Defines the payment method intended to be used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD (used in the picker app to get special prices from your catalogue)."
          },
          "reference": {
            "type": "string",
            "description": "Provide an identifier for the credit card. In case of credit/debit cards include the last 4 numbers registered for it (for example, VISA *3939)."
          }
        }
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "AddedItemResponse": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "JWT token"
          },
          "itemId": {
            "type": "string"
          }
        }
      },
      "updateItemsOnJobRespOk": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "itemId": {
            "type": "string"
          }
        }
      },
      "updateCommentOnJobRespOk": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "updateJobExternalDataRespOk": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "EXTERNAL_DATA_UPDATED_SUCCESSFULLY"
          }
        }
      },
      "updateItemsOnJobRespUnprocEntity": {
        "type": "object",
        "properties": {
          "errors": {
            "properties": {
              "location": {
                "type": "string",
                "description": "Error's location"
              },
              "param": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "msg": {
                "type": "string"
              }
            }
          }
        }
      },
      "FlagCreation": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Describes why the flag was created."
          }
        },
        "required": [
          "reason"
        ]
      },
      "FlagResponse": {
        "type": "object",
        "properties": {
          "flag_id": {
            "type": "number",
            "description": "Unique identifier of the flag."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601)."
          }
        }
      },
      "getStockResponse": {
        "type": "object",
        "description": "Your system should return an Array containing the different locations where an item is present, and the quantities available there. Each item of the array is a location.",
        "properties": {
          "place_name": {
            "type": "string",
            "description": "Section in which the item is located/stored (eg. warehouse # 1). It can be an empty value."
          },
          "unit": {
            "type": "string",
            "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit but it can't be an empty value."
          },
          "quantity": {
            "type": "number",
            "format": "double"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": " It could be null. Last time the item's stock was updated (UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601))."
          }
        },
        "required": [
          "place_name",
          "unit",
          "quantity",
          "updated_at"
        ]
      },
      "JobById": {
        "type": "object",
        "properties": {
          "job_number": {
            "type": "string",
            "description": "It is your internal reference of the Order/Job in your systems."
          },
          "client_id": {
            "type": "string",
            "description": "It is a unique ID for you as a Client in our Systems. It's how technically we identify you and your orders"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601). Start time of the Slot for this Job"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date / [ISO - 8601](https://es.wikipedia.org/wiki/ISO_8601). End time of the Slot for this Job"
          },
          "state": {
            "type": "string",
            "description": "Describes the state of the Job."
          },
          "origin": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "address_two": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "coordinates": {
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "number"
                  },
                  "lng": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "address_two": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "coordinates": {
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "number"
                  },
                  "lng": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "total_items": {
            "type": "number",
            "description": "Total items in the current Job."
          },
          "items_replaced": {
            "type": "number",
            "description": "Total items replaced in the current Job."
          },
          "products_cost": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number"
              },
              "currency_code": {
                "type": "string"
              }
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "package_id": {
                  "type": "string"
                },
                "quantity": {
                  "type": "number"
                },
                "found_quantity": {
                  "type": "number"
                },
                "photo_url": {
                  "type": "string"
                },
                "presentation": {
                  "type": "object",
                  "properties": {
                    "quantity": {
                      "type": "number"
                    },
                    "unit": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "price": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "currency_code": {
                          "type": "string"
                        }
                      }
                    },
                    "weight": {
                      "type": "number"
                    },
                    "dimensions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "length": {
                            "type": "number"
                          },
                          "width": {
                            "type": "number"
                          },
                          "height": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string"
                    },
                    "another attributes": {
                      "type": "string"
                    }
                  }
                },
                "origin": {
                  "description": "Who adds the item (client, picker...)",
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                },
                "is_substitute": {
                  "type": "boolean"
                },
                "replaced_by": {
                  "type": "string"
                }
              }
            }
          },
          "collect_with": {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "description": "The payment method used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD (used in the picker app to get special prices from your catalogue)."
              },
              "payment": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number"
                  },
                  "currency": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "recipient": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone_number": {
                "type": "number"
              }
            }
          },
          "tasks": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "resource": {
                "type": "string"
              },
              "payment": {
                "type": "string"
              },
              "steps": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "state": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "can_process_checkout": {
            "type": "boolean"
          },
          "delivery_options": {
            "type": "array",
            "items": {}
          },
          "job_comment": {
            "type": "string"
          },
          "external_data": {
            "description": "You can inform the resource about any additional data to register the order. This information can be submitted in create order or updated later with the endpoint external_data (link). You can sent the information to `shopperApp`, `control tower` or `webhook`.",
            "type": "object",
            "properties": {
              "webhook": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  }
                }
              },
              "backoffice": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "PointJobById": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "address_two": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "coordinates": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number"
              },
              "lng": {
                "type": "number"
              }
            }
          }
        }
      },
      "itemsJobById": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "package_id": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "found_quantity": {
              "type": "number"
            },
            "photo_url": {
              "type": "string"
            },
            "presentation": {
              "type": "object",
              "properties": {
                "quantity": {
                  "type": "number"
                },
                "unit": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "price": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "number"
                    },
                    "currency_code": {
                      "type": "string"
                    }
                  }
                },
                "weight": {
                  "type": "number"
                },
                "dimensions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "length": {
                        "type": "number"
                      },
                      "width": {
                        "type": "number"
                      },
                      "height": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "attributes": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string"
                },
                "another attributes": {
                  "type": "string"
                }
              }
            },
            "origin": {
              "description": "Who adds the item (client, picker...)",
              "type": "string"
            },
            "comment": {
              "type": "string"
            },
            "is_substitute": {
              "type": "boolean"
            },
            "replaced_by": {
              "type": "string"
            }
          }
        }
      },
      "barcodes": {
        "type": "object",
        "properties": {
          "barcode": {
            "type": "string"
          }
        }
      },
      "paymentInfoResponse": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string"
          },
          "prices": {
            "type": "object",
            "properties": {
              "subtotal": {
                "type": "number",
                "description": "Subtotal of the goods. Without taxes, discounts or shipping_fee."
              },
              "shippingFee": {
                "type": "number",
                "description": "Fee charged to the customer for the shipping of goods."
              },
              "discounts": {
                "type": "number",
                "description": "Discounts applied to the customer."
              },
              "taxes": {
                "type": "number",
                "description": "Taxes charged to the customer."
              },
              "order_value": {
                "type": "number",
                "description": "The value to be paid for the order, it includes the price of the goods, taxes, discounts and shipping_fee."
              },
              "attributes": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "ORDER_VALUE",
                            "SHIPPING_FEE",
                            "TAXES",
                            "DISCOUNTS",
                            "SUBTOTAL"
                          ]
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "number"
                        }
                      },
                      "description": "Add here details of each item that is within the prices. Specify here if there is more than one value in any item. I.e, If the invoice charges a total of 100 in taxes divided in two subtypes, there will be two items, describing each fee, each one with a name and value",
                      "required": [
                        "type",
                        "name",
                        "value"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "type",
                        "name",
                        "value"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "type",
                        "name",
                        "value"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "type",
                        "name",
                        "value"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "type",
                        "name",
                        "value"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "payment": {
            "type": "object",
            "properties": {
              "id": {
                "description": "Internal Client ID of the payment type.",
                "nullable": true,
                "type": "string"
              },
              "payment_status": {
                "type": "string",
                "enum": [
                  "FAILED",
                  "SUCCEEDED",
                  "CHANGED",
                  "IN_PROGRESS",
                  "REVERTED"
                ],
                "description": "Status of the payment. It could be one of these 5 values: 1. 'FAILED': When the total payment of the order fails. If it is reported that the payment was failed, our system will automatically raise a flag in the order so that it can be resolved by an agent from the control tower. 2. 'SUCCEEDED': When the full payment of the order is successful. If you have a payment confirmation lock activated, when you receive this status, the Shopper App is unlocked. 3. 'CHANGED': Payment information has changed. 4. 'IN_PROGRESS': The payment is in progress. 5. 'REVERTED': The payment was completely reverted"
              },
              "method": {
                "type": "string",
                "enum": [
                  "CASH",
                  "PREPAID",
                  "PAYMENT_TERMINAL",
                  "LOYALTY_CARD",
                  "PAYMENT_LINK",
                  "TRANSFER"
                ],
                "description": "Defines the payment method intended to be used by the user. Options are PREPAID, CASH, PAYMENT_TERMINAL, LOYALTY_CARD, PAYMENT_LINK and TRANSFER (used in the picker app to get special prices from your catalogue)."
              },
              "reference": {
                "description": "Provide an identifier for the credit card. In case of credit/debit cards include the last 4 numbers registered for it (for example, VISA *3939).",
                "nullable": true,
                "type": "string"
              },
              "value": {
                "type": "number",
                "description": "Amount to be paid"
              },
              "payment_status_details": {
                "type": "string",
                "description": "Extra details of the payment status"
              },
              "method_details": {
                "type": "string",
                "description": "Extra details of the payment method"
              },
              "blocking_policy": {
                "type": "string",
                "description": "Desired Blocking Policy",
                "enum": [
                  "CHECKOUT",
                  "EXIT_STORE",
                  "UNBLOCKED"
                ]
              },
              "metadata": {
                "type": "object",
                "description": "Json object to add details or relevant information about the payment being processed"
              }
            }
          },
          "invoice": {
            "properties": {
              "reference": {
                "type": "string",
                "description": "Invoice number or reference."
              },
              "attachments": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of URL's related to the PDF/Images to find the invoice on your systems."
              }
            },
            "nullable": true,
            "type": "object"
          }
        }
      },
      "CreateNewPackages": {
        "type": "array",
        "items": {
          "properties": {
            "name": {
              "type": "string"
            },
            "reference": {
              "type": "string"
            },
            "department": {
              "type": "string"
            }
          }
        }
      },
      "PackagesCreateResponse": {
        "type": "object",
        "properties": {
          "package_ids": {
            "type": "array",
            "items": {}
          }
        }
      },
      "AddItemsToJobRequest": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "format": "uuid",
            "description": "The job's id."
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "photo_url": {
                  "type": "string"
                },
                "unit": {
                  "type": "string",
                  "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                },
                "sub_unit": {
                  "type": "string",
                  "description": "For standard units of measure use UCUM base units. Otherwise, it will be considered as a custom unit."
                },
                "quantity": {
                  "type": "number"
                },
                "sub_quantity": {
                  "type": "number"
                },
                "quantity_found_limits": {
                  "description": "You can define the maximum and minimum quantity of the product that can be picked. This will allow restricting the quantities of the product that can be carried according to promotions or business decisions. `These parameters will take precedence over the global parameters.`",
                  "properties": {
                    "max": {
                      "type": "number",
                      "description": "Quantity of product in the unit defined above, which restricts the collector the maximum that he can select from a product."
                    },
                    "min": {
                      "type": "number",
                      "description": "Quantity of product in the unit defined above, which restricts the collector the minimum that he can select from a product."
                    }
                  }
                },
                "barcodes": {
                  "type": "array",
                  "description": "EAN Codes per each item. (Used for Scanner Integration) Separated by commas. Example: ['2000125','20021215','54545454'] minimum 1 item. Barcodes can't be null",
                  "items": {}
                },
                "weight": {
                  "type": "number",
                  "description": "Should be specified in kilograms (kg)"
                },
                "volume": {
                  "type": "number",
                  "description": "Should be specified in liters (L)"
                },
                "price": {
                  "type": "number"
                },
                "comment": {
                  "type": "string"
                },
                "attributes": {
                  "properties": {
                    "category": {
                      "type": "string"
                    },
                    "plu": {
                      "type": "string"
                    },
                    "ean": {
                      "type": "string",
                      "description": "This value will be rendered on Control Tower."
                    },
                    "location": {
                      "type": "string",
                      "description": "The picker will see a tag indicating the product's location in the store."
                    },
                    "picking_index": {
                      "type": "string",
                      "pattern": "^[0-9]+$",
                      "description": "A number that will be used to order the products in the shopper app. In the case that is also sent the category or Location and these are configured in the database, the Shopper App will take the values of the Category or Location for its ordering."
                    }
                  }
                }
              },
              "required": [
                "id",
                "name",
                "unit",
                "quantity",
                "sub_unit",
                "sub_quantity",
                "price",
                "attributes"
              ]
            }
          }
        },
        "required": [
          "job_id",
          "items"
        ]
      },
      "AddItemsToJobResponse": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "format": "uuid"
          },
          "items_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "RemoveItemsFromJobRequest": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "format": "uuid",
            "description": "The job's id."
          },
          "items_references": {
            "type": "array",
            "description": "The item's references. If more than one item inside the job matches the reference, all items will be marked as canceled.",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "job_id",
          "items_references"
        ]
      },
      "RemoveItemsFromJobResponse": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "format": "uuid"
          },
          "items_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      }
    }
  }
}